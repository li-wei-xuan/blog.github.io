import{_ as o,r as l,o as c,c as d,b as n,d as a,w as t,a as s,e as i}from"./app-EaupiRXX.js";const r={},p=s(`<p><strong>在JavaScript 中，提供了四种可用的本地存储方式： cookie ，sessionStorage， localStorage， indexedDB。</strong></p><table><thead><tr><th>名称</th><th>存储大小</th><th>有效时间</th><th>数据与服务器之间的交互方式</th><th>访问策略</th></tr></thead><tbody><tr><td><a href="#cookie">cookie</a></td><td>数据大小不能超过4k</td><td>与设置的cookie过期时间有关，过期时间之前一直有效，即使窗口或浏览器关闭依然有效</td><td>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端</td><td>符合同源策略可以访问</td></tr><tr><td><a href="#localstorage">localStorage</a></td><td>一般为 5M，大小根据厂商不同有所差异（2.5 ~ 10 M 波动）</td><td>存储数据持久，浏览器关闭后数据不丢失除非主动删除数据，否则数据一直存在。</td><td>仅在本地保存，不与服务器交互</td><td>即使符合同源也不可以相互访问</td></tr><tr><td><a href="#sessionstorage">sessionStorage</a></td><td>和 localStorage 一样</td><td>数据在当前浏览器窗口关闭后自动删除</td><td>仅在本地保存，不与服务器交互</td><td>符合同源策略可以访问</td></tr><tr><td><a href="#indexeddb">indexedDB</a></td><td>大于 250M</td><td>需手动更新 或 删除数据</td><td>仅在本地保存，不与服务器交互</td><td>符合同源策略可以访问</td></tr></tbody></table><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span>cookie</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ol><li>cookie类型为「小型文本文件」，作为一段一般不超过 4KB 的小型文本数据。</li><li>它由名称（Name）、值（Value）和用于控制 cookie 有效期、安全性、使用范围 的可选属性组成，以键值对的形式存储到本地。</li><li>cookie在每次请求中都会被发送，如果不使用 HTTPS 并对其加密，其保存的信息很容易被窃取，导致安全风险。</li></ol></div><h3 id="cookie的使用" tabindex="-1"><a class="header-anchor" href="#cookie的使用"><span>cookie的使用</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    <span class="token comment">//JavaScript 中，创建 cookie 如下所示：</span>
    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;名字=值&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">//cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：</span>
    <span class="token comment">//使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。</span>
    document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取 cookie：</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
    <span class="token comment">// 修改 cookie 类似于创建 cookie，如下所示：</span>
    document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">&quot;username=John Smith; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// cookie的删除，最常用的方法就是给cookie设置一个过期的事件，这样cookie过期后会被浏览器删除</span>
    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage"><span>localStorage</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ol><li>生命周期：持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的</li><li>存储的信息在同一域中是共享的。</li><li>当本页操作（新增、修改、删除）了 localStorage 的时候，本页面不会触发 storage 事件, 但是别的页面会触发 storage 事件。</li><li>大小：5M（跟浏览器厂商有关系）</li><li>localStorage 本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li><li>受同源策略的限制</li></ol></div>`,8),u={id:"localstorage的缺点",tabindex:"-1"},v={class:"header-anchor",href:"#localstorage的缺点"},m=s(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>无法像Cookie一样设置过期时间
只能存入字符串，无法直接存对象。可以借助 JSON.stringify() 存入， 配合 JSON.parse() 拿出解析。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localstorage的使用" tabindex="-1"><a class="header-anchor" href="#localstorage的使用"><span>localStorage的使用</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    <span class="token comment">// 定义键值</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取键值</span>
    localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取键名</span>
    localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//获取第一个键名</span>
    <span class="token comment">// 删除键值</span>
    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 一次性清除所有存储</span>
    localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage"><span>sessionStorage</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ol><li>生命周期：一旦页面（会话）关闭， sessionStorage 将会删除数据。</li><li>存储的信息在同一域中是共享的。</li><li>当本页操作（新增、修改、删除）了 sessionStorage 的时候，本页面不会触发 storage 事件, 但是别的页面会触发 storage 事件。</li><li>大小：5M（跟浏览器厂商有关系）</li><li>sessionStorage 本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li><li>受同源策略的限制</li></ol></div>`,5),k={id:"sessionstorage的缺点",tabindex:"-1"},h={class:"header-anchor",href:"#sessionstorage的缺点"},g=s(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>无法像Cookie一样设置过期时间
只能存入字符串，无法直接存对象。可以借助 JSON.stringify() 存入， 配合 JSON.parse() 拿出解析。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sessionstorage的使用" tabindex="-1"><a class="header-anchor" href="#sessionstorage的使用"><span>sessionStorage的使用</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    <span class="token comment">// 定义键值</span>
    sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取键值</span>
    sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取键名</span>
    sessionStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//获取第一个键名</span>
    <span class="token comment">// 删除键值</span>
    sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 一次性清除所有存储</span>
    sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="indexeddb" tabindex="-1"><a class="header-anchor" href="#indexeddb"><span>indexedDB</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ol><li>indexedDB 是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API 使用索引来实现对该数据的高性能搜索</li><li>虽然 Web Storage 对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案</li></ol></div><h3 id="indexeddb的优点" tabindex="-1"><a class="header-anchor" href="#indexeddb的优点"><span>indexedDB的优点：</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1. 储存量理论上没有上限
2. 所有操作都是异步的，相比 LocalStorage 同步操作性能更高，尤其是数据量较大时
3. 原生支持储存JS的对象
4. 是个正经的数据库，意味着数据库能干的事它都能干
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),b={id:"indexeddb的缺点",tabindex:"-1"},x={class:"header-anchor",href:"#indexeddb的缺点"},S=s(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1. 操作非常繁琐
2. 本身有一定门槛
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本使用步骤" tabindex="-1"><a class="header-anchor" href="#基本使用步骤"><span>基本使用步骤：</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1. 打开数据库并且开始一个事务
2. 创建一个 object store
3. 构建一个请求来执行一些数据库操作，像增加或提取数据等。
4. 通过监听正确类型的 DOM 事件以等待操作完成。
5. 在操作结果上进行一些操作（可以在 request 对象中找到）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>针对不对场景的使用选择不同的缓存方式：
* 标记用户与跟踪用户行为的情况，推荐使用 cookie
* 适合长期保存在本地的数据（令牌），推荐使用 localStorage
* 敏感账号一次性登录，推荐使用 sessionStorage
* 存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用indexedDB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function w(f,_){const e=l("font");return c(),d("div",null,[p,n("h3",u,[n("a",v,[n("span",null,[a(e,{class:"text-color-2",color:"#e91e63"},{default:t(()=>[i("localStorage的缺点：")]),_:1})])])]),m,n("h3",k,[n("a",h,[n("span",null,[a(e,{class:"text-color-2",color:"#e91e63"},{default:t(()=>[i("sessionStorage的缺点：")]),_:1})])])]),g,n("h3",b,[n("a",x,[n("span",null,[a(e,{class:"text-color-2",color:"#e91e63"},{default:t(()=>[i("indexedDB的缺点：")]),_:1})])])]),S])}const B=o(r,[["render",w],["__file","04.JavaScriptbendihuancun.html.vue"]]),T=JSON.parse('{"path":"/docs/JavaScript/04.JavaScriptbendihuancun.html","title":"Javascript本地存储的方式","lang":"zh-CN","frontmatter":{"title":"Javascript本地存储的方式","date":"2022-10-09T00:00:00.000Z","tags":["JavaScript","interview"],"categories":["JavaScript","interview"]},"headers":[{"level":2,"title":"cookie","slug":"cookie","link":"#cookie","children":[{"level":3,"title":"cookie的使用","slug":"cookie的使用","link":"#cookie的使用","children":[]}]},{"level":2,"title":"localStorage","slug":"localstorage","link":"#localstorage","children":[{"level":3,"title":"localStorage的缺点：","slug":"localstorage的缺点","link":"#localstorage的缺点","children":[]},{"level":3,"title":"localStorage的使用","slug":"localstorage的使用","link":"#localstorage的使用","children":[]}]},{"level":2,"title":"sessionStorage","slug":"sessionstorage","link":"#sessionstorage","children":[{"level":3,"title":"sessionStorage的缺点：","slug":"sessionstorage的缺点","link":"#sessionstorage的缺点","children":[]},{"level":3,"title":"sessionStorage的使用","slug":"sessionstorage的使用","link":"#sessionstorage的使用","children":[]}]},{"level":2,"title":"indexedDB","slug":"indexeddb","link":"#indexeddb","children":[{"level":3,"title":"indexedDB的优点：","slug":"indexeddb的优点","link":"#indexeddb的优点","children":[]},{"level":3,"title":"indexedDB的缺点：","slug":"indexeddb的缺点","link":"#indexeddb的缺点","children":[]},{"level":3,"title":"基本使用步骤：","slug":"基本使用步骤","link":"#基本使用步骤","children":[]}]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}],"git":{"createdTime":1679887873000,"updatedTime":1679887873000,"contributors":[{"name":"liweijiang","email":"916215061@qq.com","commits":1}]},"filePathRelative":"docs/JavaScript/04.JavaScript本地缓存.md","readingTime":{"minutes":5.02,"words":1506}}');export{B as comp,T as data};
