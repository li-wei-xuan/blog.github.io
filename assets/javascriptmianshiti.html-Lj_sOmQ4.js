import{_ as n,o as s,c as a,a as e}from"./app-EaupiRXX.js";const t={},p=e(`<h3 id="_1-根据下面-es6-构造函数的书写方式-要求写出-es5-的" tabindex="-1"><a class="header-anchor" href="#_1-根据下面-es6-构造函数的书写方式-要求写出-es5-的"><span>1. 根据下面 <em>ES6</em> 构造函数的书写方式，要求写出 <em>ES5</em> 的</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数组去重有哪些方法-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_2-数组去重有哪些方法-美团-19-年"><span>2. 数组去重有哪些方法？（美团 <em>19</em> 年）</span></a></h3><h3 id="_3-描述下列代码的执行结果" tabindex="-1"><a class="header-anchor" href="#_3-描述下列代码的执行结果"><span>3. 描述下列代码的执行结果</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-描述下列代码的执行结果" tabindex="-1"><a class="header-anchor" href="#_4-描述下列代码的执行结果"><span>4. 描述下列代码的执行结果</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> arr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-描述下列代码的执行结果" tabindex="-1"><a class="header-anchor" href="#_5-描述下列代码的执行结果"><span>5. 描述下列代码的执行结果</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bar</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// foo1 foo2 bar1 bar2 foo3 bar3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-描述下列代码的执行结果" tabindex="-1"><a class="header-anchor" href="#_6-描述下列代码的执行结果"><span>6. 描述下列代码的执行结果</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 逻辑短路</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-描述下列代码的执行结果" tabindex="-1"><a class="header-anchor" href="#_7-描述下列代码的执行结果"><span>7. 描述下列代码的执行结果</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ButtonWrapper</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">domBtnEl<span class="token punctuation">,</span> hash</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>domBtnEl <span class="token operator">=</span> domBtnEl<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>domBtnEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clickEvent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>domBtnEl<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clickEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">clickEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The hash of the button is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-箭头函数有哪些特点" tabindex="-1"><a class="header-anchor" href="#_8-箭头函数有哪些特点"><span>8. 箭头函数有哪些特点</span></a></h3><h3 id="_9-说一说类的继承" tabindex="-1"><a class="header-anchor" href="#_9-说一说类的继承"><span>9. 说一说类的继承</span></a></h3><h3 id="_10-new-操作符都做了哪些事" tabindex="-1"><a class="header-anchor" href="#_10-new-操作符都做了哪些事"><span>10. <em>new</em> 操作符都做了哪些事？</span></a></h3><h3 id="_11-call、apply、bind-的区别" tabindex="-1"><a class="header-anchor" href="#_11-call、apply、bind-的区别"><span>11. <em>call、apply、bind</em> 的区别 ？</span></a></h3><h3 id="_12-事件循环机制-宏任务、微任务" tabindex="-1"><a class="header-anchor" href="#_12-事件循环机制-宏任务、微任务"><span>12. 事件循环机制（宏任务、微任务）</span></a></h3><h3 id="_13-你了解-node-中的事件循环机制吗-node11-版本以后有什么改变" tabindex="-1"><a class="header-anchor" href="#_13-你了解-node-中的事件循环机制吗-node11-版本以后有什么改变"><span>13. 你了解 <em>node</em> 中的事件循环机制吗？<em>node11</em> 版本以后有什么改变</span></a></h3><h3 id="_14-什么是函数柯里化" tabindex="-1"><a class="header-anchor" href="#_14-什么是函数柯里化"><span>14. 什么是函数柯里化？</span></a></h3><h3 id="_15-promise-all-方法的使用场景-数组中必须每一项都是-promise-对象吗-不是-promise-对象会如何处理" tabindex="-1"><a class="header-anchor" href="#_15-promise-all-方法的使用场景-数组中必须每一项都是-promise-对象吗-不是-promise-对象会如何处理"><span>15. <em>promise.all</em> 方法的使用场景？数组中必须每一项都是 <em>promise</em> 对象吗？不是 <em>promise</em> 对象会如何处理 ？</span></a></h3><h3 id="_16-this-的指向哪几种" tabindex="-1"><a class="header-anchor" href="#_16-this-的指向哪几种"><span>16. <em>this</em> 的指向哪几种 ？</span></a></h3><h3 id="_17-js-中继承实现的几种方式" tabindex="-1"><a class="header-anchor" href="#_17-js-中继承实现的几种方式"><span>17. <em>JS</em> 中继承实现的几种方式</span></a></h3><h3 id="_18-什么是事件监听" tabindex="-1"><a class="header-anchor" href="#_18-什么是事件监听"><span>18. 什么是事件监听</span></a></h3><h3 id="_19-什么是-js-的闭包-有什么作用" tabindex="-1"><a class="header-anchor" href="#_19-什么是-js-的闭包-有什么作用"><span>19. 什么是 <em>js</em> 的闭包？有什么作用？</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>JavaScript 的闭包是指那些能够访问独立的（自由的）变量的函数

函数在 JavaScript 中是闭包。大多数函数都使用了它们上层作用域中的变量，这些变量即闭包所维护的变量。因为这些变量可能会在外层函数已经执行结束之后的某个时刻被内嵌的函数访问，所以这些变量的值需要被保存起来。

闭包有几个用途和好处：
访问函数内部的变量：通常情况下，函数内部的变量仅在函数执行期间可用。闭包使得我们可以在函数执行之后访问函数内的变量。
封装性：通过闭包可以避免全局命名空间的污染，因为在闭包中声明的变量对外部是不可见的，只能通过闭包提供的方法来访问。
私有性：闭包可以创建私有变量，其他代码不能直接访问这些变量，只能通过闭包提供的公共方法来操作。
持久性：闭包捕获的环境和变量会一直保存在内存中，直到没有引用时才会被垃圾回收机制回收。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-事件委托以及冒泡原理" tabindex="-1"><a class="header-anchor" href="#_20-事件委托以及冒泡原理"><span>20. 事件委托以及冒泡原理</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>事件委托指的是将事件监听器添加到父元素，然后利用冒泡来处理子元素的事件。
它的主要优点是可以降低内存占用（因为只需要一个父元素的事件监听器，而不是为每个子元素都添加一个），并且可以在动态添加新的子元素后仍然处理事件。

这与JavaScript中的事件冒泡机制密切相关。事件冒泡指的是事件从最深的节点（通常是事件发生的元素）开始，然后逐级向上传播到最少的节点（通常是文档）。
如果你在一个元素上设置了事件处理程序，那么这个事件不仅仅会在这个元素上触发，同样也会在它的所有父元素上触发，因为这个行为符合事件冒泡规则。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-let-const-var-的区别-什么是块级作用域-如何用" tabindex="-1"><a class="header-anchor" href="#_21-let-const-var-的区别-什么是块级作用域-如何用"><span>21. <em>let const var</em> 的区别？什么是块级作用域？如何用？</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> 全局污染，变量提升，可重复定义
<span class="token keyword">let</span> <span class="token keyword">const</span> 具有块作用域，不存在变量提升，不可重复定义
<span class="token keyword">let</span> <span class="token keyword">const</span> 区别
  <span class="token keyword">const</span> 定义需要初始值，定义后无法修改
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_22-es5-的方法实现块级作用域-立即执行函数-es6-呢" tabindex="-1"><a class="header-anchor" href="#_22-es5-的方法实现块级作用域-立即执行函数-es6-呢"><span>22. <em>ES5</em> 的方法实现块级作用域（立即执行函数） <em>ES6</em> 呢？</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// ES5
(function () {
  let str = &quot;ES5&quot;;
  console.log(str);
})();

// ES6
{
  let str = &quot;ES6&quot;;
  console.log(str);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-es6-箭头函数的特性" tabindex="-1"><a class="header-anchor" href="#_23-es6-箭头函数的特性"><span>23. <em>ES6</em> 箭头函数的特性</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>消除函数的二义性

<span class="token literal-property property">更短的语法</span><span class="token operator">:</span> 箭头函数提供了一个更加简洁的函数声明方式。

不绑定自己的 <span class="token keyword">this</span><span class="token operator">:</span> 箭头函数不会创建自己的 <span class="token keyword">this</span>，而是继承自父执行上下文中的 <span class="token keyword">this</span>

没有 arguments 对象<span class="token operator">:</span> 箭头函数没有自己的 arguments 对象。

<span class="token literal-property property">不绑定构造函数</span><span class="token operator">:</span> 箭头函数不能用作构造函数，因此如果你尝试使用 <span class="token keyword">new</span> 运算符创建一个箭头函数的实例，将会抛出错误。

<span class="token literal-property property">不绑定原型属性</span><span class="token operator">:</span> 箭头函数没有 prototype 属性。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_24-箭头函数与普通函数的区别" tabindex="-1"><a class="header-anchor" href="#_24-箭头函数与普通函数的区别"><span>24. 箭头函数与普通函数的区别 ？</span></a></h3><h3 id="_25-js-的基本数据类型有哪些-基本数据类型和引用数据类型的区别" tabindex="-1"><a class="header-anchor" href="#_25-js-的基本数据类型有哪些-基本数据类型和引用数据类型的区别"><span>25. <em>JS</em> 的基本数据类型有哪些？基本数据类型和引用数据类型的区别</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">值类型</span><span class="token punctuation">(</span>基本类型<span class="token punctuation">)</span>
  <span class="token function">字符串（String）、数字</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token function">、布尔</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>、空（Null）、未定义（Undefined）、Symbol。

<span class="token function">引用数据类型</span><span class="token punctuation">(</span>对象类型<span class="token punctuation">)</span>
  <span class="token function">对象</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token function">、数组</span><span class="token punctuation">(</span>Array<span class="token punctuation">)</span><span class="token function">、函数</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span>，还有两个特殊的对象：正则（RegExp）和日期（Date）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-nan-是什么的缩写" tabindex="-1"><a class="header-anchor" href="#_26-nan-是什么的缩写"><span>26. <em>NaN</em> 是什么的缩写</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>NaN 是 &quot;Not a Number&quot; 的缩写，直译为 &quot;不是数字&quot;。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_27-js-的作用域类型" tabindex="-1"><a class="header-anchor" href="#_27-js-的作用域类型"><span>27. <em>JS</em> 的作用域类型</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>主要有两种类型的作用域：

全局作用域：
  在代码中任何外部函数之外声明的变量属于全局作用域。
  全局作用域中的变量可以在代码的任何其他部分被访问和修改，包括函数内部。
  全局变量占用全局命名空间，全局变量过多可能会导致命名冲突。

局部作用域：
函数作用域和块级作用域是局部作用域的两种形式。局部作用域中的变量只能在定义它们的区域内被访问和修改。
  函数作用域：
    在函数内部声明的变量拥有函数作用域，这意味着它们仅在函数内部可用。
    每次当函数被调用时，都会为函数内的局部变量创建一个新的作用域。
  块级作用域：
    由 <span class="token constant">ES6</span> 引入，使用 <span class="token keyword">let</span> 和 <span class="token keyword">const</span> 关键字声明的变量具有块级作用域，这些变量在声明它们的块或子块中是可见的。
    块是由大括号 <span class="token punctuation">{</span><span class="token punctuation">}</span> 包围的一段代码，例如 <span class="token keyword">for</span> 循环、<span class="token keyword">if</span> 语句、以及其他包含在大括号中的语句。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_28-undefined-null-返回的结果是什么-undefined-与-null-的区别在哪" tabindex="-1"><a class="header-anchor" href="#_28-undefined-null-返回的结果是什么-undefined-与-null-的区别在哪"><span>28. <em>undefined==null</em> 返回的结果是什么？<em>undefined</em> 与 <em>null</em> 的区别在哪？</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

区别
  <span class="token keyword">undefined</span> 表示未定义，<span class="token keyword">null</span> 代表空值，空引用
  <span class="token keyword">typeof</span> <span class="token parameter"><span class="token keyword">undefined</span></span> <span class="token operator">=&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token parameter"><span class="token keyword">null</span></span> <span class="token operator">=&gt;</span> Object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_29-写一个函数判断变量类型" tabindex="-1"><a class="header-anchor" href="#_29-写一个函数判断变量类型"><span>29. 写一个函数判断变量类型</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">variable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 先处理null特殊情况</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>variable <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取类型字符串，例如[object Array]</span>
  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 正则表达式匹配类型字符串，并提取类型</span>
  <span class="token keyword">const</span> match <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\[object (\\w+)\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 如果匹配成功，返回实际类型的小写形式</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>match <span class="token operator">&amp;&amp;</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 对其他简单的类型使用typeof</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> variable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Object.setPrototypeOf 会导致 instanceof 误判</span>
<span class="token comment">// [Symbol.toStringTag]: &quot;&quot; 会导致 Object.prototype.toString.call 误判</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-js-的异步处理函数" tabindex="-1"><a class="header-anchor" href="#_30-js-的异步处理函数"><span>30. <em>js</em> 的异步处理函数</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>JavaScript的异步处理函数多种多样，最常见的有如下几种：
<span class="token function">回调函数</span><span class="token punctuation">(</span>Callbacks<span class="token punctuation">)</span>：这是JavaScript最早的异步处理模式，回调函数（Callback）是一个用于异步处理结果的函数引用。

Promise：Promise 是 <span class="token constant">ES6</span> 中引入的，旨在解决回调地狱的问题。Promise 对象代表一个异步操作的最终结果。

async<span class="token operator">/</span><span class="token keyword">await</span>：async<span class="token operator">/</span><span class="token keyword">await</span> 是 <span class="token constant">ES7</span> 中引入的，它们允许你以同步的方式编写异步代码。在函数前面加上 <span class="token keyword">async</span> 关键字可以使这个函数返回一个 Promise。<span class="token keyword">await</span> 关键字只能在 <span class="token keyword">async</span> 函数内部使用，它会暂停代码的执行，直到 Promise 被解析或拒绝。

Generators：Generator 是 <span class="token constant">ES6</span> 中引入的。它们是可以暂停执行并在稍后继续的函数。结合 Promise，我们可以用很好看的同步样式的代码来处理异步。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-defer-与-async-的区别" tabindex="-1"><a class="header-anchor" href="#_31-defer-与-async-的区别"><span>31. <em>defer</em> 与 <em>async</em> 的区别</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>defer 和 <span class="token keyword">async</span> 都是 <span class="token constant">HTML</span> script 标签的属性，用于控制JavaScript文件的加载和执行时间。
它们的差异主要体现在以下三个方面：
<span class="token number">1</span>、下载时机：
  defer 和 <span class="token keyword">async</span> 都允许浏览器异步地下载 JavaScript 文件，即在下载 <span class="token constant">JS</span> 文件的同时，浏览器将继续解析<span class="token constant">HTML</span>。
<span class="token number">2</span>、执行时机：
  <span class="token keyword">async</span>：
    一旦下载完成，浏览器将尽快执行 JavaScript。
    这可能会发生在 <span class="token constant">HTML</span> 还在解析的过程中，因此可能会暂停 <span class="token constant">HTML</span> 解析。
  defer：
    JavaScript 的执行将被推迟到 <span class="token constant">HTML</span> 解析完毕之后。
<span class="token number">3</span>、执行顺序：
  <span class="token keyword">async</span>：
    多个 <span class="token keyword">async</span> 脚本的执行顺序不能保证。它们的执行顺序是下载完成的顺序。
  defer：
    多个 defer 脚本将按照在 <span class="token constant">HTML</span> 文件中出现的顺序依次执行。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_32-浏览器事件循环和任务队列" tabindex="-1"><a class="header-anchor" href="#_32-浏览器事件循环和任务队列"><span>32. 浏览器事件循环和任务队列</span></a></h3><h3 id="_33-原型与原型链-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_33-原型与原型链-美团-19-年"><span>33. 原型与原型链 （美团 19 年）</span></a></h3><h3 id="_34-作用域与作用域链-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_34-作用域与作用域链-美团-19-年"><span>34. 作用域与作用域链 （美团 19 年）</span></a></h3><h3 id="_35-闭包及应用场景以及闭包缺点-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_35-闭包及应用场景以及闭包缺点-美团-19-年"><span>35. 闭包及应用场景以及闭包缺点 （美团 19 年）</span></a></h3><h3 id="_36-继承方式-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_36-继承方式-美团-19-年"><span>36. 继承方式 （美团 19 年）</span></a></h3><h3 id="_37-原始值与引用值-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_37-原始值与引用值-美团-19-年"><span>37. 原始值与引用值 （美团 19 年）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>原始值传的是值，修改后不改变原来的值
引用值传的是址，修改后会改变原来的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_38-描述下列代码的执行结果" tabindex="-1"><a class="header-anchor" href="#_38-描述下列代码的执行结果"><span>38. 描述下列代码的执行结果</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">first</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 bb</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 aa</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_39-如何判断数组或对象-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_39-如何判断数组或对象-美团-19-年"><span>39. 如何判断数组或对象（美团 19 年）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> 
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span>call 
<span class="token keyword">instanceof</span> 
<span class="token class-name">Array<span class="token punctuation">.</span>isArray</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_40-对象深拷贝与浅拷贝-单独问了-object-assign-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_40-对象深拷贝与浅拷贝-单独问了-object-assign-美团-19-年"><span>40. 对象深拷贝与浅拷贝，单独问了 <em>Object.assign</em>（美团 19 年）</span></a></h3><h3 id="_42-说说-instanceof-原理-并回答下面的题目-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_42-说说-instanceof-原理-并回答下面的题目-美团-19-年"><span>42. 说说 <em>instanceof</em> 原理，并回答下面的题目（美团 19 年）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true of false ?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_43-内存泄漏-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_43-内存泄漏-美团-19-年"><span>43. 内存泄漏（美团 19 年）</span></a></h3><h3 id="_44-es6-新增哪些东西-让你自己说-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_44-es6-新增哪些东西-让你自己说-美团-19-年"><span>44. <em>ES6</em> 新增哪些东西？让你自己说（美团 19 年）</span></a></h3><h3 id="_45-weakmap、weakset-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_45-weakmap、weakset-美团-19-年"><span>45. <em>weakmap、weakset</em>（美团 <em>19</em> 年）</span></a></h3><h3 id="_46-为什么-es6-会新增-promise-美团-19-年" tabindex="-1"><a class="header-anchor" href="#_46-为什么-es6-会新增-promise-美团-19-年"><span>46. 为什么 <em>ES6</em> 会新增 <em>Promise</em>（美团 19 年）</span></a></h3><h3 id="_47-es5-实现继承-虾皮" tabindex="-1"><a class="header-anchor" href="#_47-es5-实现继承-虾皮"><span>47. <em>ES5</em> 实现继承？（虾皮）</span></a></h3><h3 id="_48-科里化-搜狗" tabindex="-1"><a class="header-anchor" href="#_48-科里化-搜狗"><span>48. 科里化？（搜狗）</span></a></h3><h3 id="_49-防抖和节流-虾皮" tabindex="-1"><a class="header-anchor" href="#_49-防抖和节流-虾皮"><span>49. 防抖和节流？（虾皮）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 防抖</span>
<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//清除上一次延时器</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//重新设置新的延时器</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 节流</span>
<span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">1500</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime <span class="token operator">&gt;</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      lastTime <span class="token operator">=</span> nowTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_50-闭包-好未来-探讨了-40-分钟" tabindex="-1"><a class="header-anchor" href="#_50-闭包-好未来-探讨了-40-分钟"><span>50. 闭包？（好未来---探讨了 <em>40</em> 分钟）</span></a></h3><h3 id="_51-原型和原型链-字节" tabindex="-1"><a class="header-anchor" href="#_51-原型和原型链-字节"><span>51. 原型和原型链？（字节）</span></a></h3><h3 id="_52-排序算法-时间复杂度、空间复杂度" tabindex="-1"><a class="header-anchor" href="#_52-排序算法-时间复杂度、空间复杂度"><span>52. 排序算法---（时间复杂度、空间复杂度）</span></a></h3><h3 id="_53-浏览器事件循环和-node-事件循环-搜狗" tabindex="-1"><a class="header-anchor" href="#_53-浏览器事件循环和-node-事件循环-搜狗"><span>53. 浏览器事件循环和 <em>node</em> 事件循环（搜狗）</span></a></h3><h3 id="_54-闭包的好处" tabindex="-1"><a class="header-anchor" href="#_54-闭包的好处"><span>54. 闭包的好处</span></a></h3><h3 id="_55-let、const、var-的区别" tabindex="-1"><a class="header-anchor" href="#_55-let、const、var-的区别"><span>55. <em>let、const、var</em> 的区别</span></a></h3><h3 id="_56-闭包、作用域-可以扩充到作用域链" tabindex="-1"><a class="header-anchor" href="#_56-闭包、作用域-可以扩充到作用域链"><span>56. 闭包、作用域（可以扩充到作用域链）</span></a></h3><h3 id="_57-promise" tabindex="-1"><a class="header-anchor" href="#_57-promise"><span>57. <em>Promise</em></span></a></h3><h3 id="_58-实现一个函数-对一个-url-进行请求-失败就再次请求-超过最大次数就走失败回调-任何一次成功都走成功回调" tabindex="-1"><a class="header-anchor" href="#_58-实现一个函数-对一个-url-进行请求-失败就再次请求-超过最大次数就走失败回调-任何一次成功都走成功回调"><span>58. 实现一个函数,对一个 url 进行请求,失败就再次请求,超过最大次数就走失败回调,任何一次成功都走成功回调</span></a></h3><h3 id="_59-冒泡排序" tabindex="-1"><a class="header-anchor" href="#_59-冒泡排序"><span>59. 冒泡排序</span></a></h3><h3 id="_60-数组降维" tabindex="-1"><a class="header-anchor" href="#_60-数组降维"><span>60. 数组降维</span></a></h3><h3 id="_61-call-apply-bind" tabindex="-1"><a class="header-anchor" href="#_61-call-apply-bind"><span>61. <em>call apply bind</em></span></a></h3><h3 id="_62-promise-代码题" tabindex="-1"><a class="header-anchor" href="#_62-promise-代码题"><span>62. promise 代码题</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reject1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reject2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_63-proxy-是实现代理-可以改变-js-底层的实现方式-然后说了一下和-object-defineproperty-的区别" tabindex="-1"><a class="header-anchor" href="#_63-proxy-是实现代理-可以改变-js-底层的实现方式-然后说了一下和-object-defineproperty-的区别"><span>63. <em>proxy</em> 是实现代理，可以改变 <em>js</em> 底层的实现方式, 然后说了一下和 <em>Object.defineProperty</em> 的区别</span></a></h3><h3 id="_64-使用-es5-与-es6-分别实现继承" tabindex="-1"><a class="header-anchor" href="#_64-使用-es5-与-es6-分别实现继承"><span>64. 使用 <em>ES5</em> 与 <em>ES6</em> 分别实现继承</span></a></h3><h3 id="_65-深拷贝" tabindex="-1"><a class="header-anchor" href="#_65-深拷贝"><span>65. 深拷贝</span></a></h3><h3 id="_66-async-与-await-的作用" tabindex="-1"><a class="header-anchor" href="#_66-async-与-await-的作用"><span>66. <em>async</em> 与 <em>await</em> 的作用</span></a></h3><h3 id="_67-数据的基础类型-原始类型-有哪些" tabindex="-1"><a class="header-anchor" href="#_67-数据的基础类型-原始类型-有哪些"><span>67. 数据的基础类型（原始类型）有哪些</span></a></h3><h3 id="_68-typeof-null-返回结果" tabindex="-1"><a class="header-anchor" href="#_68-typeof-null-返回结果"><span>68. <em>typeof null</em> 返回结果</span></a></h3><h3 id="_69-对变量进行类型判断的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_69-对变量进行类型判断的方式有哪些"><span>69. 对变量进行类型判断的方式有哪些</span></a></h3><h3 id="_70-typeof-与-instanceof-的区别-instanceof-是如何实现" tabindex="-1"><a class="header-anchor" href="#_70-typeof-与-instanceof-的区别-instanceof-是如何实现"><span>70. <em>typeof</em> 与 <em>instanceof</em> 的区别？ <em>instanceof</em> 是如何实现？</span></a></h3><h3 id="_71-引用类型有哪些-有什么特点" tabindex="-1"><a class="header-anchor" href="#_71-引用类型有哪些-有什么特点"><span>71. 引用类型有哪些，有什么特点</span></a></h3><h3 id="_72-如何得到一个变量的类型-指函数封装实现" tabindex="-1"><a class="header-anchor" href="#_72-如何得到一个变量的类型-指函数封装实现"><span>72. 如何得到一个变量的类型---指函数封装实现</span></a></h3><h3 id="_73-什么是作用域、闭包" tabindex="-1"><a class="header-anchor" href="#_73-什么是作用域、闭包"><span>73. 什么是作用域、闭包</span></a></h3><h3 id="_74-闭包的缺点是什么-闭包的应用场景有哪些-怎么销毁闭包" tabindex="-1"><a class="header-anchor" href="#_74-闭包的缺点是什么-闭包的应用场景有哪些-怎么销毁闭包"><span>74. 闭包的缺点是什么？闭包的应用场景有哪些？怎么销毁闭包？</span></a></h3><h3 id="_75-js的垃圾回收站机制" tabindex="-1"><a class="header-anchor" href="#_75-js的垃圾回收站机制"><span>75. <em>JS</em>的垃圾回收站机制</span></a></h3><h3 id="_76-什么是作用域链、原型链" tabindex="-1"><a class="header-anchor" href="#_76-什么是作用域链、原型链"><span>76. 什么是作用域链、原型链</span></a></h3><h3 id="_77-new-一个构造函数发生了什么" tabindex="-1"><a class="header-anchor" href="#_77-new-一个构造函数发生了什么"><span>77. <em>new</em> 一个构造函数发生了什么</span></a></h3><h3 id="_78-对一个构造函数实例化后-它的原型链指向什么" tabindex="-1"><a class="header-anchor" href="#_78-对一个构造函数实例化后-它的原型链指向什么"><span>78. 对一个构造函数实例化后. 它的原型链指向什么</span></a></h3><h3 id="_79-什么是变量提升" tabindex="-1"><a class="header-anchor" href="#_79-什么是变量提升"><span>79. 什么是变量提升</span></a></h3><h3 id="_80-和-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_80-和-的区别是什么"><span>80. == 和 === 的区别是什么</span></a></h3><h3 id="_81-object-is-方法比较的是什么" tabindex="-1"><a class="header-anchor" href="#_81-object-is-方法比较的是什么"><span>81. <em>Object.is</em> 方法比较的是什么</span></a></h3><h3 id="_82-基础数据类型和引用数据类型-哪个是保存在栈内存中-哪个是在堆内存中" tabindex="-1"><a class="header-anchor" href="#_82-基础数据类型和引用数据类型-哪个是保存在栈内存中-哪个是在堆内存中"><span>82. 基础数据类型和引用数据类型，哪个是保存在栈内存中？哪个是在堆内存中？</span></a></h3><h3 id="_83-箭头函数解决了什么问题" tabindex="-1"><a class="header-anchor" href="#_83-箭头函数解决了什么问题"><span>83. 箭头函数解决了什么问题？</span></a></h3><h3 id="_84-new-一个箭头函数后-它的-this-指向什么" tabindex="-1"><a class="header-anchor" href="#_84-new-一个箭头函数后-它的-this-指向什么"><span>84. <em>new</em> 一个箭头函数后，它的 <em>this</em> 指向什么？</span></a></h3><h3 id="_85-promise-的其他方法有用过吗-如-all、race。请说下这两者的区别" tabindex="-1"><a class="header-anchor" href="#_85-promise-的其他方法有用过吗-如-all、race。请说下这两者的区别"><span>85. <em>promise</em> 的其他方法有用过吗？如 <em>all、race</em>。请说下这两者的区别</span></a></h3><h3 id="_86-class-是如何实现的" tabindex="-1"><a class="header-anchor" href="#_86-class-是如何实现的"><span>86. <em>class</em> 是如何实现的</span></a></h3><h3 id="_87-let、const、var-的区别" tabindex="-1"><a class="header-anchor" href="#_87-let、const、var-的区别"><span>87. <em>let、const、var</em> 的区别</span></a></h3><h3 id="_88-es6-中模块化导入和导出与-common-js-有什么区别" tabindex="-1"><a class="header-anchor" href="#_88-es6-中模块化导入和导出与-common-js-有什么区别"><span>88. <em>ES6</em> 中模块化导入和导出与 <em>common.js</em> 有什么区别</span></a></h3><h3 id="_89-说一下普通函数和箭头函数的区别" tabindex="-1"><a class="header-anchor" href="#_89-说一下普通函数和箭头函数的区别"><span>89. 说一下普通函数和箭头函数的区别</span></a></h3><h3 id="_90-说一下-promise-和-async-和-await-什么关系" tabindex="-1"><a class="header-anchor" href="#_90-说一下-promise-和-async-和-await-什么关系"><span>90. 说一下 <em>promise</em> 和 <em>async</em> 和 <em>await</em> 什么关系</span></a></h3><h3 id="_91-说一下你学习过的有关-es6-的知识点" tabindex="-1"><a class="header-anchor" href="#_91-说一下你学习过的有关-es6-的知识点"><span>91. 说一下你学习过的有关 <em>ES6</em> 的知识点</span></a></h3><h3 id="_92-了解过-js-中-arguments-吗-接收的是实参还是形参" tabindex="-1"><a class="header-anchor" href="#_92-了解过-js-中-arguments-吗-接收的是实参还是形参"><span>92. 了解过 <em>js</em> 中 <em>arguments</em> 吗？接收的是实参还是形参？</span></a></h3><h3 id="_93-es6-相比于-es5-有什么变化" tabindex="-1"><a class="header-anchor" href="#_93-es6-相比于-es5-有什么变化"><span>93. <em>ES6</em> 相比于 <em>ES5</em> 有什么变化</span></a></h3><h3 id="_94-强制类型转换方法有哪些" tabindex="-1"><a class="header-anchor" href="#_94-强制类型转换方法有哪些"><span>94. 强制类型转换方法有哪些？</span></a></h3><h3 id="_95-纯函数" tabindex="-1"><a class="header-anchor" href="#_95-纯函数"><span>95. 纯函数</span></a></h3><h3 id="_96-js-模块化" tabindex="-1"><a class="header-anchor" href="#_96-js-模块化"><span>96. <em>JS</em> 模块化</span></a></h3><h3 id="_97-看过-jquery-源码吗" tabindex="-1"><a class="header-anchor" href="#_97-看过-jquery-源码吗"><span>97. 看过 <em>jquery</em> 源码吗？</span></a></h3><h3 id="_98-说一下-js-中的-this" tabindex="-1"><a class="header-anchor" href="#_98-说一下-js-中的-this"><span>98. 说一下 <em>js</em> 中的 <em>this</em></span></a></h3><h3 id="_99-apply-call-bind-区别-手写" tabindex="-1"><a class="header-anchor" href="#_99-apply-call-bind-区别-手写"><span>99. <em>apply call bind</em> 区别，手写</span></a></h3><h3 id="_100-手写-reduce-flat" tabindex="-1"><a class="header-anchor" href="#_100-手写-reduce-flat"><span>100. 手写 <em>reduce flat</em></span></a></h3><h3 id="_101-隐试转换的原理-是怎么转换的" tabindex="-1"><a class="header-anchor" href="#_101-隐试转换的原理-是怎么转换的"><span>101. == 隐试转换的原理？是怎么转换的</span></a></h3><h3 id="_102-1-2-3-map-parseint-结果是什么-为什么-字节" tabindex="-1"><a class="header-anchor" href="#_102-1-2-3-map-parseint-结果是什么-为什么-字节"><span>102. [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) 结果是什么，为什么 （字节）</span></a></h3><h3 id="_103-防抖-节流是什么-如何实现-字节" tabindex="-1"><a class="header-anchor" href="#_103-防抖-节流是什么-如何实现-字节"><span>103. 防抖，节流是什么，如何实现 （字节）</span></a></h3><h3 id="_104-介绍下-set、map、weakset-和-weakmap-的区别-字节" tabindex="-1"><a class="header-anchor" href="#_104-介绍下-set、map、weakset-和-weakmap-的区别-字节"><span>104. 介绍下 <em>Set、Map、WeakSet</em> 和 <em>WeakMap</em> 的区别（字节）</span></a></h3><h3 id="_105-settimeout、promise、async-await-的区别-字节" tabindex="-1"><a class="header-anchor" href="#_105-settimeout、promise、async-await-的区别-字节"><span>105. <em>setTimeout、Promise、Async/Await</em> 的区别（字节）</span></a></h3><h3 id="_106-promise-构造函数是同步执行还是异步执行-那么-then-方法呢-字节" tabindex="-1"><a class="header-anchor" href="#_106-promise-构造函数是同步执行还是异步执行-那么-then-方法呢-字节"><span>106. <em>Promise</em> 构造函数是同步执行还是异步执行，那么 <em>then</em> 方法呢？（字节）</span></a></h3><h3 id="_107-情人节福利题-如何实现一个-new-字节" tabindex="-1"><a class="header-anchor" href="#_107-情人节福利题-如何实现一个-new-字节"><span>107. 情人节福利题，如何实现一个 <em>new</em> （字节）</span></a></h3><p>let Parent = function (name, age) { this.name = name; this.age = age; }; Parent.prototype.sayName = function () { console.log(this.name); }; //自己定义的 new 方法 let newMethod = function (Parent, ...rest) { // 1.以构造器的 prototype 属性为原型，创建新对象； let child = Object.create(Parent.prototype); // 2.将 this 和调用参数传给构造器执行 let result = Parent.apply(child, rest); // 3.如果构造器没有手动返回对象，则返回第一步的对象 return typeof result === &#39;object&#39; ? result : child; }; //创建实例，将构造函数 Parent 与形参作为参数传入 const child = newMethod(Parent, &#39;echo&#39;, 26); child.sayName() //&#39;echo&#39;; //最后检验，与使用 new 的效果相同 console.log(child instanceof Parent)//true console.log(child.hasOwnProperty(&#39;name&#39;))//true console.log(child.hasOwnProperty(&#39;age&#39;))//true console.log(child.hasOwnProperty(&#39;sayName&#39;))//false</p><h3 id="_108-实现一个-sleep-函数-字节" tabindex="-1"><a class="header-anchor" href="#_108-实现一个-sleep-函数-字节"><span>108. 实现一个 <em>sleep</em> 函数（字节）</span></a></h3><h3 id="_109-使用-sort-对数组-3-15-8-29-102-22-进行排序-输出结果-字节" tabindex="-1"><a class="header-anchor" href="#_109-使用-sort-对数组-3-15-8-29-102-22-进行排序-输出结果-字节"><span>109. 使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果 （字节）</span></a></h3><h3 id="_110-实现-5-add-3-sub-2-百度" tabindex="-1"><a class="header-anchor" href="#_110-实现-5-add-3-sub-2-百度"><span>110. 实现 5.add(3).sub(2) (百度)</span></a></h3><h3 id="_111-给定两个数组-求交集" tabindex="-1"><a class="header-anchor" href="#_111-给定两个数组-求交集"><span>111. 给定两个数组，求交集</span></a></h3><h3 id="_112-为什么普通-for-循环的性能远远高于-foreach-的性能-请解释其中的原因。" tabindex="-1"><a class="header-anchor" href="#_112-为什么普通-for-循环的性能远远高于-foreach-的性能-请解释其中的原因。"><span>112. 为什么普通 <em>for</em> 循环的性能远远高于 <em>forEach</em> 的性能，请解释其中的原因。</span></a></h3><h3 id="_113-实现一个字符串匹配算法-从长度为-n-的字符串-s-中-查找是否存在字符串-t-t-的长度是-m-若存在返回所在位置。" tabindex="-1"><a class="header-anchor" href="#_113-实现一个字符串匹配算法-从长度为-n-的字符串-s-中-查找是否存在字符串-t-t-的长度是-m-若存在返回所在位置。"><span>113. 实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T，T 的长度是 m，若存在返回所在位置。</span></a></h3><h3 id="_114-使用-javascript-proxy-实现简单的数据绑定" tabindex="-1"><a class="header-anchor" href="#_114-使用-javascript-proxy-实现简单的数据绑定"><span>114. 使用 <em>JavaScript Proxy</em> 实现简单的数据绑定</span></a></h3><h3 id="_115-数组里面有-10-万个数据-取第一个元素和第-10-万个元素的时间相差多少-字节" tabindex="-1"><a class="header-anchor" href="#_115-数组里面有-10-万个数据-取第一个元素和第-10-万个元素的时间相差多少-字节"><span>115. 数组里面有 <em>10</em> 万个数据，取第一个元素和第 <em>10</em> 万个元素的时间相差多少（字节）</span></a></h3><h3 id="_116-打印出-1-10000-以内的对称数" tabindex="-1"><a class="header-anchor" href="#_116-打印出-1-10000-以内的对称数"><span>116. 打印出 <em>1~10000</em> 以内的对称数</span></a></h3><h3 id="_117-简述同步和异步的区别" tabindex="-1"><a class="header-anchor" href="#_117-简述同步和异步的区别"><span>117. 简述同步和异步的区别</span></a></h3><h3 id="_118-怎么添加、移除、复制、创建、和查找节点" tabindex="-1"><a class="header-anchor" href="#_118-怎么添加、移除、复制、创建、和查找节点"><span>118. 怎么添加、移除、复制、创建、和查找节点</span></a></h3><h3 id="_119-实现一个函数-clone-可以对-javascript-中的五种主要数据类型-number、string、-object、array、boolean-进行复制" tabindex="-1"><a class="header-anchor" href="#_119-实现一个函数-clone-可以对-javascript-中的五种主要数据类型-number、string、-object、array、boolean-进行复制"><span>119. 实现一个函数 <em>clone</em> 可以对 <em>Javascript</em> 中的五种主要数据类型（<em>Number、string、 Object、Array、Boolean</em>）进行复制</span></a></h3><h3 id="_120-如何消除一个数组里面重复的元素" tabindex="-1"><a class="header-anchor" href="#_120-如何消除一个数组里面重复的元素"><span>120. 如何消除一个数组里面重复的元素</span></a></h3><h3 id="_121-写一个返回闭包的函数" tabindex="-1"><a class="header-anchor" href="#_121-写一个返回闭包的函数"><span>121. 写一个返回闭包的函数</span></a></h3><h3 id="_122-使用递归完成-1-到-100-的累加" tabindex="-1"><a class="header-anchor" href="#_122-使用递归完成-1-到-100-的累加"><span>122. 使用递归完成 1 到 100 的累加</span></a></h3><h3 id="_123-javascript-有哪几种数据类型" tabindex="-1"><a class="header-anchor" href="#_123-javascript-有哪几种数据类型"><span>123. <em>Javascript</em> 有哪几种数据类型</span></a></h3><h3 id="_124-如何判断数据类型" tabindex="-1"><a class="header-anchor" href="#_124-如何判断数据类型"><span>124. 如何判断数据类型</span></a></h3><h3 id="_125-console-log-1-2-和-console-log-1-2-的打印结果" tabindex="-1"><a class="header-anchor" href="#_125-console-log-1-2-和-console-log-1-2-的打印结果"><span>125. console.log(1+&#39;2&#39;)和 console.log(1-&#39;2&#39;)的打印结果</span></a></h3><h3 id="_126-js-的事件委托是什么-原理是什么" tabindex="-1"><a class="header-anchor" href="#_126-js-的事件委托是什么-原理是什么"><span>126. <em>JS</em> 的事件委托是什么，原理是什么</span></a></h3><h3 id="_127-如何改变函数内部的-this-指针的指向" tabindex="-1"><a class="header-anchor" href="#_127-如何改变函数内部的-this-指针的指向"><span>127. 如何改变函数内部的 <em>this</em> 指针的指向</span></a></h3><h3 id="_128-js-延迟加载的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_128-js-延迟加载的方式有哪些"><span>128. <em>JS</em> 延迟加载的方式有哪些？</span></a></h3><h3 id="_129-说说严格模式的限制" tabindex="-1"><a class="header-anchor" href="#_129-说说严格模式的限制"><span>129. 说说严格模式的限制</span></a></h3><h3 id="_130-attribute-和-property-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_130-attribute-和-property-的区别是什么"><span>130. <em>attribute</em> 和 <em>property</em> 的区别是什么？</span></a></h3><h3 id="_131-es6-能写-class-么-为什么会出现-class-这种东西" tabindex="-1"><a class="header-anchor" href="#_131-es6-能写-class-么-为什么会出现-class-这种东西"><span>131. <em>ES6</em> 能写 <em>class</em> 么，为什么会出现 <em>class</em> 这种东西?</span></a></h3><h3 id="_132-常见兼容性问题" tabindex="-1"><a class="header-anchor" href="#_132-常见兼容性问题"><span>132. 常见兼容性问题</span></a></h3><h3 id="_133-函数防抖节流的原理" tabindex="-1"><a class="header-anchor" href="#_133-函数防抖节流的原理"><span>133. 函数防抖节流的原理</span></a></h3><h3 id="_134-原始类型有哪几种-null-是对象吗" tabindex="-1"><a class="header-anchor" href="#_134-原始类型有哪几种-null-是对象吗"><span>134. 原始类型有哪几种？<em>null</em> 是对象吗？</span></a></h3><h3 id="_135-为什么-console-log-0-2-0-1-0-3-false" tabindex="-1"><a class="header-anchor" href="#_135-为什么-console-log-0-2-0-1-0-3-false"><span>135. 为什么 <em>console.log(0.2+0.1==0.3) // false</em></span></a></h3><h3 id="_136-说一下-js-中类型转换的规则" tabindex="-1"><a class="header-anchor" href="#_136-说一下-js-中类型转换的规则"><span>136. 说一下 <em>JS</em> 中类型转换的规则？</span></a></h3><h3 id="_137-深拷贝和浅拷贝的区别-如何实现" tabindex="-1"><a class="header-anchor" href="#_137-深拷贝和浅拷贝的区别-如何实现"><span>137. 深拷贝和浅拷贝的区别？如何实现</span></a></h3><h3 id="_138-如何判断-this-箭头函数的-this-是什么" tabindex="-1"><a class="header-anchor" href="#_138-如何判断-this-箭头函数的-this-是什么"><span>138. 如何判断 <em>this</em>？箭头函数的 <em>this</em> 是什么</span></a></h3><h3 id="_139-call、apply-以及-bind-函数内部实现是怎么样的" tabindex="-1"><a class="header-anchor" href="#_139-call、apply-以及-bind-函数内部实现是怎么样的"><span>139. <em>call、apply</em> 以及 <em>bind</em> 函数内部实现是怎么样的</span></a></h3><h3 id="_140-为什么会出现-settimeout-倒计时误差-如何减少" tabindex="-1"><a class="header-anchor" href="#_140-为什么会出现-settimeout-倒计时误差-如何减少"><span>140. 为什么会出现 <em>setTimeout</em> 倒计时误差？如何减少</span></a></h3><h3 id="_141-谈谈你对-js-执行上下文栈和作用域链的理解" tabindex="-1"><a class="header-anchor" href="#_141-谈谈你对-js-执行上下文栈和作用域链的理解"><span>141. 谈谈你对 <em>JS</em> 执行上下文栈和作用域链的理解</span></a></h3><h3 id="_142-new-的原理是什么-通过-new-的方式创建对象和通过字面量创建有什么区别" tabindex="-1"><a class="header-anchor" href="#_142-new-的原理是什么-通过-new-的方式创建对象和通过字面量创建有什么区别"><span>142. <em>new</em> 的原理是什么？通过 <em>new</em> 的方式创建对象和通过字面量创建有什么区别？</span></a></h3><h3 id="_143-prototype-和-proto-区别是什么" tabindex="-1"><a class="header-anchor" href="#_143-prototype-和-proto-区别是什么"><span>143. <em>prototype</em> 和 __<em>proto</em>__ 区别是什么？</span></a></h3><h3 id="_144-使用-es5-实现一个继承" tabindex="-1"><a class="header-anchor" href="#_144-使用-es5-实现一个继承"><span>144. 使用 ES5 实现一个继承？</span></a></h3><h3 id="_145-取数组的最大值-es5、es6" tabindex="-1"><a class="header-anchor" href="#_145-取数组的最大值-es5、es6"><span>145. 取数组的最大值（<em>ES5、ES6</em>）</span></a></h3><h3 id="_146-es6-新的特性有哪些" tabindex="-1"><a class="header-anchor" href="#_146-es6-新的特性有哪些"><span>146. <em>ES6</em> 新的特性有哪些？</span></a></h3><h3 id="_147-promise-有几种状态-promise-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#_147-promise-有几种状态-promise-有什么优缺点"><span>147. <em>Promise</em> 有几种状态, <em>Promise</em> 有什么优缺点 ?</span></a></h3><h3 id="_148-promise-构造函数是同步还是异步执行-then-呢-promise-如何实现-then-处理" tabindex="-1"><a class="header-anchor" href="#_148-promise-构造函数是同步还是异步执行-then-呢-promise-如何实现-then-处理"><span>148. <em>Promise</em> 构造函数是同步还是异步执行，<em>then</em> 呢 ? <em>Promise</em> 如何实现 <em>then</em> 处理 ?</span></a></h3><h3 id="_149-promise-和-settimeout-的区别" tabindex="-1"><a class="header-anchor" href="#_149-promise-和-settimeout-的区别"><span>149. <em>Promise</em> 和 <em>setTimeout</em> 的区别 ?</span></a></h3><h3 id="_150-如何实现-promise-all" tabindex="-1"><a class="header-anchor" href="#_150-如何实现-promise-all"><span>150. 如何实现 <em>Promise.all</em> ?</span></a></h3><h3 id="_151-如何实现-promise-finally" tabindex="-1"><a class="header-anchor" href="#_151-如何实现-promise-finally"><span>151. 如何实现 <em>Promise.finally</em> ?</span></a></h3><h3 id="_152-如何判断-img-加载完成" tabindex="-1"><a class="header-anchor" href="#_152-如何判断-img-加载完成"><span>152. 如何判断 <em>img</em> 加载完成</span></a></h3><h3 id="_153-如何阻止冒泡" tabindex="-1"><a class="header-anchor" href="#_153-如何阻止冒泡"><span>153. 如何阻止冒泡？</span></a></h3><h3 id="_154-如何阻止默认事件" tabindex="-1"><a class="header-anchor" href="#_154-如何阻止默认事件"><span>154. 如何阻止默认事件？</span></a></h3><h3 id="_155-如何用原生-js-给一个按钮绑定两个-onclick-事件" tabindex="-1"><a class="header-anchor" href="#_155-如何用原生-js-给一个按钮绑定两个-onclick-事件"><span>155. 如何用原生 <em>js</em> 给一个按钮绑定两个 <em>onclick</em> 事件？</span></a></h3><h3 id="_156-拖拽会用到哪些事件" tabindex="-1"><a class="header-anchor" href="#_156-拖拽会用到哪些事件"><span>156. 拖拽会用到哪些事件</span></a></h3><h3 id="_157-document-write-和-innerhtml-的区别" tabindex="-1"><a class="header-anchor" href="#_157-document-write-和-innerhtml-的区别"><span>157. <em>document.write</em> 和 <em>innerHTML</em> 的区别</span></a></h3><h3 id="_158-jquery-的事件委托方法-bind-、live、delegate、one、on-之间有什么区别" tabindex="-1"><a class="header-anchor" href="#_158-jquery-的事件委托方法-bind-、live、delegate、one、on-之间有什么区别"><span>158. <em>jQuery</em> 的事件委托方法 <em>bind 、live、delegate、one、on</em> 之间有什么区别？</span></a></h3><h3 id="_159-document-ready-方法和-window-onload-有什么区别" tabindex="-1"><a class="header-anchor" href="#_159-document-ready-方法和-window-onload-有什么区别"><span>159. <em>$(document).ready</em> 方法和 <em>window.onload</em> 有什么区别？</span></a></h3><h3 id="_160-jquery-中-get-提交和-post-提交有区别吗" tabindex="-1"><a class="header-anchor" href="#_160-jquery-中-get-提交和-post-提交有区别吗"><span>160. jquery 中$.get()提交和$.post()提交有区别吗？</span></a></h3><h3 id="_161-await-async-如何实现-阿里" tabindex="-1"><a class="header-anchor" href="#_161-await-async-如何实现-阿里"><span>161. <em>await async</em> 如何实现 （阿里）</span></a></h3><h3 id="_162-clientwidth-offsetwidth-scrollwidth-的区别" tabindex="-1"><a class="header-anchor" href="#_162-clientwidth-offsetwidth-scrollwidth-的区别"><span>162. <em>clientWidth,offsetWidth,scrollWidth</em> 的区别</span></a></h3><h3 id="_163-产生一个不重复的随机数组" tabindex="-1"><a class="header-anchor" href="#_163-产生一个不重复的随机数组"><span>163. 产生一个不重复的随机数组</span></a></h3><h3 id="_164-continue-和-break-的区别" tabindex="-1"><a class="header-anchor" href="#_164-continue-和-break-的区别"><span>164. <em>continue</em> 和 <em>break</em> 的区别</span></a></h3><h3 id="_165-如何在-jquery-上扩展插件-以及内部原理-腾讯" tabindex="-1"><a class="header-anchor" href="#_165-如何在-jquery-上扩展插件-以及内部原理-腾讯"><span>165. 如何在 <em>jquery</em> 上扩展插件，以及内部原理（腾讯）</span></a></h3><h3 id="_166-async-await-如何捕获错误" tabindex="-1"><a class="header-anchor" href="#_166-async-await-如何捕获错误"><span>166. <em>async/await</em> 如何捕获错误</span></a></h3><h3 id="_167-proxy-对比-object-defineproperty-的优势" tabindex="-1"><a class="header-anchor" href="#_167-proxy-对比-object-defineproperty-的优势"><span>167. <em>Proxy</em> 对比 <em>Object.defineProperty</em> 的优势</span></a></h3><h3 id="_168-原型链-可以改变原型链的规则吗" tabindex="-1"><a class="header-anchor" href="#_168-原型链-可以改变原型链的规则吗"><span>168. 原型链，可以改变原型链的规则吗?</span></a></h3><h3 id="_169-讲一讲继承的所有方式都有什么-手写一个寄生组合式继承" tabindex="-1"><a class="header-anchor" href="#_169-讲一讲继承的所有方式都有什么-手写一个寄生组合式继承"><span>169. 讲一讲继承的所有方式都有什么？手写一个寄生组合式继承</span></a></h3><h3 id="_170-js-基本数据类型有哪些-栈和堆有什么区别-为什么要这样存储。-快手" tabindex="-1"><a class="header-anchor" href="#_170-js-基本数据类型有哪些-栈和堆有什么区别-为什么要这样存储。-快手"><span>170. <em>JS</em> 基本数据类型有哪些？栈和堆有什么区别，为什么要这样存储。（快手）</span></a></h3><h3 id="_171-settimeout-0-什么时候执行" tabindex="-1"><a class="header-anchor" href="#_171-settimeout-0-什么时候执行"><span>171. <em>setTimeout(() =&gt; {}, 0)</em> 什么时候执行</span></a></h3><h3 id="_172-js-有函数重载吗-网易" tabindex="-1"><a class="header-anchor" href="#_172-js-有函数重载吗-网易"><span>172. <em>js</em> 有函数重载吗（网易）</span></a></h3><h3 id="_173-给你一个数组-计算每个数出现的次数-如果每个数组返回的数都是独一无二的就返回-true-相反则返回的-flase" tabindex="-1"><a class="header-anchor" href="#_173-给你一个数组-计算每个数出现的次数-如果每个数组返回的数都是独一无二的就返回-true-相反则返回的-flase"><span>173. 给你一个数组，计算每个数出现的次数，如果每个数组返回的数都是独一无二的就返回 <em>true</em> 相反则返回的 <em>flase</em></span></a></h3><h3 id="_174-封装一个能够统计重复的字符的函数-例如-aaabbbdddddfff-转化为-3a3b5d3f" tabindex="-1"><a class="header-anchor" href="#_174-封装一个能够统计重复的字符的函数-例如-aaabbbdddddfff-转化为-3a3b5d3f"><span>174. 封装一个能够统计重复的字符的函数，例如 <em>aaabbbdddddfff</em> 转化为 <em>3a3b5d3f</em></span></a></h3><h3 id="_175-写出代码的执行结果-并解释为什么" tabindex="-1"><a class="header-anchor" href="#_175-写出代码的执行结果-并解释为什么"><span>175. 写出代码的执行结果，并解释为什么？</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_176-写出代码的执行结果-并解释为什么" tabindex="-1"><a class="header-anchor" href="#_176-写出代码的执行结果-并解释为什么"><span>176. 写出代码的执行结果，并解释为什么？</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_177-写出下面程序的打印顺序-并简要说明原因" tabindex="-1"><a class="header-anchor" href="#_177-写出下面程序的打印顺序-并简要说明原因"><span>177. 写出下面程序的打印顺序，并简要说明原因</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pr1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_178-javascript-中什么是伪数组-如何将伪数组转换为标准数组" tabindex="-1"><a class="header-anchor" href="#_178-javascript-中什么是伪数组-如何将伪数组转换为标准数组"><span>178. <em>javascript</em> 中什么是伪数组？如何将伪数组转换为标准数组</span></a></h3><h3 id="_179-array-和-object-的区别" tabindex="-1"><a class="header-anchor" href="#_179-array-和-object-的区别"><span>179. <em>array</em> 和 <em>object</em> 的区别</span></a></h3><h3 id="_180-jquery-事件委托" tabindex="-1"><a class="header-anchor" href="#_180-jquery-事件委托"><span>180. <em>jquery</em> 事件委托</span></a></h3><h3 id="_181-js-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_181-js-基本数据类型"><span>181. <em>JS</em> 基本数据类型</span></a></h3><h3 id="_182-请实现一个模块-math-支持链式调用math-add-2-4-minus-3-times-2" tabindex="-1"><a class="header-anchor" href="#_182-请实现一个模块-math-支持链式调用math-add-2-4-minus-3-times-2"><span>182. 请实现一个模块 <em>math</em>，支持链式调用<code>math.add(2,4).minus(3).times(2);</code></span></a></h3><h3 id="_183-请简述-es6-代码转成-es5-代码的实现思路。" tabindex="-1"><a class="header-anchor" href="#_183-请简述-es6-代码转成-es5-代码的实现思路。"><span>183. 请简述 <em>ES6</em> 代码转成 <em>ES5</em> 代码的实现思路。</span></a></h3><h3 id="_184-下列代码的执行结果" tabindex="-1"><a class="header-anchor" href="#_184-下列代码的执行结果"><span>184. 下列代码的执行结果</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_185-js-有哪些内置对象" tabindex="-1"><a class="header-anchor" href="#_185-js-有哪些内置对象"><span>185. <em>JS</em> 有哪些内置对象？</span></a></h3><h3 id="_186-dom-怎样添加、移除、移动、复制、创建和查找节点" tabindex="-1"><a class="header-anchor" href="#_186-dom-怎样添加、移除、移动、复制、创建和查找节点"><span>186. <em>DOM</em> 怎样添加、移除、移动、复制、创建和查找节点</span></a></h3><h3 id="_187-eval-是做什么的" tabindex="-1"><a class="header-anchor" href="#_187-eval-是做什么的"><span>187. <em>eval</em> 是做什么的？</span></a></h3><h3 id="_188-null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#_188-null-和-undefined-的区别"><span>188. <em>null</em> 和 <em>undefined</em> 的区别？</span></a></h3><h3 id="_189-new-操作符具体干了什么呢" tabindex="-1"><a class="header-anchor" href="#_189-new-操作符具体干了什么呢"><span>189. <em>new</em> 操作符具体干了什么呢？</span></a></h3><h3 id="_190-去除字符串中的空格" tabindex="-1"><a class="header-anchor" href="#_190-去除字符串中的空格"><span>190. 去除字符串中的空格</span></a></h3><h3 id="_191-常见的内存泄露-以及解决方案" tabindex="-1"><a class="header-anchor" href="#_191-常见的内存泄露-以及解决方案"><span>191. 常见的内存泄露，以及解决方案</span></a></h3><h3 id="_192-箭头函数和普通函数里面的-this-有什么区别" tabindex="-1"><a class="header-anchor" href="#_192-箭头函数和普通函数里面的-this-有什么区别"><span>192. 箭头函数和普通函数里面的 <em>this</em> 有什么区别</span></a></h3><h3 id="_193-设计一个方法-ispalindrom-以判断是否回文-颠倒后的字符串和原来的字符串一样为回文" tabindex="-1"><a class="header-anchor" href="#_193-设计一个方法-ispalindrom-以判断是否回文-颠倒后的字符串和原来的字符串一样为回文"><span>193. 设计⼀个⽅法(<em>isPalindrom</em>)以判断是否回⽂(颠倒后的字符串和原来的字符串⼀样为回⽂)</span></a></h3><h3 id="_194-设计一个方法-findmaxduplicatechar-以统计字符串中出现最多次数的字符" tabindex="-1"><a class="header-anchor" href="#_194-设计一个方法-findmaxduplicatechar-以统计字符串中出现最多次数的字符"><span>194. 设计⼀个⽅法(<em>findMaxDuplicateChar</em>)以统计字符串中出现最多次数的字符</span></a></h3><h3 id="_195-设计一段代码-使得通过点击按钮可以在-span-中显示文本框中输入的值" tabindex="-1"><a class="header-anchor" href="#_195-设计一段代码-使得通过点击按钮可以在-span-中显示文本框中输入的值"><span>195. 设计⼀段代码，使得通过点击按钮可以在 <em>span</em> 中显示⽂本框中输⼊的值</span></a></h3><h3 id="_196-map-和-foreach-的区别" tabindex="-1"><a class="header-anchor" href="#_196-map-和-foreach-的区别"><span>196. <em>map</em> 和 <em>forEach</em> 的区别？</span></a></h3><h3 id="_197-array-的常用方法" tabindex="-1"><a class="header-anchor" href="#_197-array-的常用方法"><span>197. <em>Array</em> 的常用方法</span></a></h3><h3 id="_198-数组去重的多种实现方式" tabindex="-1"><a class="header-anchor" href="#_198-数组去重的多种实现方式"><span>198. 数组去重的多种实现方式</span></a></h3><h3 id="_199-什么是预解析-预编译" tabindex="-1"><a class="header-anchor" href="#_199-什么是预解析-预编译"><span>199. 什么是预解析（预编译）</span></a></h3><h3 id="_200-原始值类型和引用值类型的区别是什么" tabindex="-1"><a class="header-anchor" href="#_200-原始值类型和引用值类型的区别是什么"><span>200. 原始值类型和引用值类型的区别是什么？</span></a></h3><h3 id="_201-冒泡排序的思路-不用-sort" tabindex="-1"><a class="header-anchor" href="#_201-冒泡排序的思路-不用-sort"><span>201. 冒泡排序的思路，不用 <em>sort</em></span></a></h3><h3 id="_202-symbol-用途" tabindex="-1"><a class="header-anchor" href="#_202-symbol-用途"><span>202. <em>symbol</em> 用途</span></a></h3><h3 id="_203-什么是函数式编程-应用场景是什么" tabindex="-1"><a class="header-anchor" href="#_203-什么是函数式编程-应用场景是什么"><span>203. 什么是函数式编程，应用场景是什么</span></a></h3><h3 id="_204-事件以及事件相关的兼容性问题" tabindex="-1"><a class="header-anchor" href="#_204-事件以及事件相关的兼容性问题"><span>204. 事件以及事件相关的兼容性问题</span></a></h3><h3 id="_205-js-小数不精准-如何计算" tabindex="-1"><a class="header-anchor" href="#_205-js-小数不精准-如何计算"><span>205. <em>JS</em> 小数不精准，如何计算</span></a></h3><h3 id="_206-写一个-mysetinterval-fn-a-b-每次间隔-a-a-b-a-2b-的时间-然后写一个-myclear-停止上面的-mysetinterval" tabindex="-1"><a class="header-anchor" href="#_206-写一个-mysetinterval-fn-a-b-每次间隔-a-a-b-a-2b-的时间-然后写一个-myclear-停止上面的-mysetinterval"><span>206. 写一个 <em>mySetInterVal(fn, a, b)</em>，每次间隔 <em>a,a+b,a+2b</em> 的时间，然后写一个 <em>myClear</em>，停止上面的 <em>mySetInterVal</em></span></a></h3><h3 id="_207-合并二维有序数组成一维有序数组-归并排序的思路" tabindex="-1"><a class="header-anchor" href="#_207-合并二维有序数组成一维有序数组-归并排序的思路"><span>207. 合并二维有序数组成一维有序数组，归并排序的思路</span></a></h3><h3 id="_208-给定一个字符串-请你找出其中不含有重复字符的最长子串的长度。" tabindex="-1"><a class="header-anchor" href="#_208-给定一个字符串-请你找出其中不含有重复字符的最长子串的长度。"><span>208. 给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。</span></a></h3><h3 id="_209-有一堆整数-请把他们分成三份-确保每一份和尽量相等-11-42-23-4-5-6-4-5-6-11-23-42-56-78-90-滴滴-2020" tabindex="-1"><a class="header-anchor" href="#_209-有一堆整数-请把他们分成三份-确保每一份和尽量相等-11-42-23-4-5-6-4-5-6-11-23-42-56-78-90-滴滴-2020"><span>209. 有一堆整数，请把他们分成三份，确保每一份和尽量相等（11，42，23，4，5，6 4 5 6 11 23 42 56 78 90）(滴滴 <em>2020</em>)</span></a></h3><h3 id="_210-手写发布订阅-头条-2020" tabindex="-1"><a class="header-anchor" href="#_210-手写发布订阅-头条-2020"><span>210. 手写发布订阅（头条 2020）</span></a></h3><h3 id="_211-手写用-es6proxy-如何实现-arr-1-的访问-滴滴-2020" tabindex="-1"><a class="header-anchor" href="#_211-手写用-es6proxy-如何实现-arr-1-的访问-滴滴-2020"><span>211. 手写用 <em>ES6proxy</em> 如何实现 <em>arr[-1]</em> 的访问（滴滴 2020）</span></a></h3><h3 id="_212-下列代码执行结果" tabindex="-1"><a class="header-anchor" href="#_212-下列代码执行结果"><span>212. 下列代码执行结果</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_213-number-的存储空间是多大-如果后台发送了一个超过最大自己的数字怎么办" tabindex="-1"><a class="header-anchor" href="#_213-number-的存储空间是多大-如果后台发送了一个超过最大自己的数字怎么办"><span>213. Number() 的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办</span></a></h3><h3 id="_214-事件是如何实现的-字节-2020" tabindex="-1"><a class="header-anchor" href="#_214-事件是如何实现的-字节-2020"><span>214. 事件是如何实现的？(字节 2020)</span></a></h3><h3 id="_215-下列代码执行结果" tabindex="-1"><a class="header-anchor" href="#_215-下列代码执行结果"><span>215. 下列代码执行结果</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_216-判断数组的方法-请分别介绍它们之间的区别和优劣" tabindex="-1"><a class="header-anchor" href="#_216-判断数组的方法-请分别介绍它们之间的区别和优劣"><span>216. 判断数组的方法，请分别介绍它们之间的区别和优劣</span></a></h3><h3 id="_217-javascript-中的数组和函数在内存中是如何存储的" tabindex="-1"><a class="header-anchor" href="#_217-javascript-中的数组和函数在内存中是如何存储的"><span>217. JavaScript 中的数组和函数在内存中是如何存储的？</span></a></h3><h3 id="_218-javascript-是如何运行的-解释型语言和编译型语言的差异是什么" tabindex="-1"><a class="header-anchor" href="#_218-javascript-是如何运行的-解释型语言和编译型语言的差异是什么"><span>218. <em>JavaScript</em> 是如何运行的？解释型语言和编译型语言的差异是什么？</span></a></h3><h3 id="_219-列举你所了解的编程范式" tabindex="-1"><a class="header-anchor" href="#_219-列举你所了解的编程范式"><span>219. 列举你所了解的编程范式？</span></a></h3><h3 id="_220-什么是面向切面-aop-的编程" tabindex="-1"><a class="header-anchor" href="#_220-什么是面向切面-aop-的编程"><span>220. 什么是面向切面（AOP）的编程？</span></a></h3><h3 id="_221-javascript-中的-const-数组可以进行-push-操作吗-为什么" tabindex="-1"><a class="header-anchor" href="#_221-javascript-中的-const-数组可以进行-push-操作吗-为什么"><span>221. <em>JavaScript</em> 中的 <em>const</em> 数组可以进行 <em>push</em> 操作吗？为什么？</span></a></h3><h3 id="_222-javascript-中对象的属性描述符有哪些-分别有什么作用" tabindex="-1"><a class="header-anchor" href="#_222-javascript-中对象的属性描述符有哪些-分别有什么作用"><span>222. JavaScript 中对象的属性描述符有哪些？分别有什么作用？</span></a></h3><h3 id="_223-javascript-中-console-有哪些-api" tabindex="-1"><a class="header-anchor" href="#_223-javascript-中-console-有哪些-api"><span>223. <em>JavaScript</em> 中 <em>console</em> 有哪些 <em>api</em> ?</span></a></h3><h3 id="_224-简单对比一下-callback、promise、generator、async-几个异步-api-的优劣" tabindex="-1"><a class="header-anchor" href="#_224-简单对比一下-callback、promise、generator、async-几个异步-api-的优劣"><span>224. 简单对比一下 <em>Callback、Promise、Generator、Async</em> 几个异步 <em>API</em> 的优劣？</span></a></h3><h3 id="_225-object-defineproperty-有哪几个参数-各自都有什么作用" tabindex="-1"><a class="header-anchor" href="#_225-object-defineproperty-有哪几个参数-各自都有什么作用"><span>225. <em>Object.defineProperty</em> 有哪几个参数？各自都有什么作用</span></a></h3><h3 id="_226-object-defineproperty-和-es6-的-proxy-有什么区别" tabindex="-1"><a class="header-anchor" href="#_226-object-defineproperty-和-es6-的-proxy-有什么区别"><span>226. <em>Object.defineProperty</em> 和 <em>ES6</em> 的 <em>Proxy</em> 有什么区别？</span></a></h3><h3 id="_227-intanceof-操作符的实现原理及实现" tabindex="-1"><a class="header-anchor" href="#_227-intanceof-操作符的实现原理及实现"><span>227. <em>intanceof</em> 操作符的实现原理及实现</span></a></h3><h3 id="_228-强制类型转换规则" tabindex="-1"><a class="header-anchor" href="#_228-强制类型转换规则"><span>228. 强制类型转换规则？</span></a></h3><h3 id="_229-object-is-与比较操作符-、-的区别" tabindex="-1"><a class="header-anchor" href="#_229-object-is-与比较操作符-、-的区别"><span>229. <em>Object.is</em>( ) 与比较操作符 “===”、“==” 的区别</span></a></h3><h3 id="_230-操作符什么时候用于字符串的拼接" tabindex="-1"><a class="header-anchor" href="#_230-操作符什么时候用于字符串的拼接"><span>230. <code>+</code> 操作符什么时候用于字符串的拼接？</span></a></h3><h3 id="_231-object-assign-和扩展运算法是深拷贝还是浅拷贝" tabindex="-1"><a class="header-anchor" href="#_231-object-assign-和扩展运算法是深拷贝还是浅拷贝"><span>231. <em>object.assign</em> 和扩展运算法是深拷贝还是浅拷贝</span></a></h3><h3 id="_232-const-对象的属性可以修改吗" tabindex="-1"><a class="header-anchor" href="#_232-const-对象的属性可以修改吗"><span>232. <em>const</em> 对象的属性可以修改吗</span></a></h3><h3 id="_233-如果-new-一个箭头函数的会怎么样" tabindex="-1"><a class="header-anchor" href="#_233-如果-new-一个箭头函数的会怎么样"><span>233. 如果 <em>new</em> 一个箭头函数的会怎么样</span></a></h3><h3 id="_234-扩展运算符的作用及使用场景" tabindex="-1"><a class="header-anchor" href="#_234-扩展运算符的作用及使用场景"><span>234. 扩展运算符的作用及使用场景</span></a></h3><h3 id="_235-proxy-可以实现什么功能" tabindex="-1"><a class="header-anchor" href="#_235-proxy-可以实现什么功能"><span>235. <em>Proxy</em> 可以实现什么功能？</span></a></h3><h3 id="_236-对象与数组的解构的理解" tabindex="-1"><a class="header-anchor" href="#_236-对象与数组的解构的理解"><span>236. 对象与数组的解构的理解</span></a></h3><h3 id="_237-如何提取高度嵌套的对象里的指定属性" tabindex="-1"><a class="header-anchor" href="#_237-如何提取高度嵌套的对象里的指定属性"><span>237. 如何提取高度嵌套的对象里的指定属性？</span></a></h3><h3 id="_238-unicode、utf-8、utf-16、utf-32-的区别" tabindex="-1"><a class="header-anchor" href="#_238-unicode、utf-8、utf-16、utf-32-的区别"><span>238. <em>Unicode、UTF-8、UTF-16、UTF-32</em> 的区别？</span></a></h3><h3 id="_239-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组" tabindex="-1"><a class="header-anchor" href="#_239-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组"><span>239. 为什么函数的 <em>arguments</em> 参数是类数组而不是数组？如何遍历类数组?</span></a></h3><h3 id="_240-escape、encodeuri、encodeuricomponent-的区别" tabindex="-1"><a class="header-anchor" href="#_240-escape、encodeuri、encodeuricomponent-的区别"><span>240. <em>escape、encodeURI、encodeURIComponent</em> 的区别</span></a></h3><h3 id="_241-use-strict-是什么意思-使用它区别是什么" tabindex="-1"><a class="header-anchor" href="#_241-use-strict-是什么意思-使用它区别是什么"><span>241. <em>use strict</em> 是什么意思 ? 使用它区别是什么？</span></a></h3><h3 id="_242-for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#_242-for-in-和-for-of-的区别"><span>242. <em>for...in</em> 和 <em>for...of</em> 的区别</span></a></h3><h3 id="_243-ajax、axios、fetch-的区别" tabindex="-1"><a class="header-anchor" href="#_243-ajax、axios、fetch-的区别"><span>243. <em>ajax、axios、fetch</em> 的区别</span></a></h3><h3 id="_244-下面代码的输出是什么-d" tabindex="-1"><a class="header-anchor" href="#_244-下面代码的输出是什么-d"><span>244. 下面代码的输出是什么？（ <em>D</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Lydia&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>Lydia</em> 和 <em>undefined</em></li><li>B: <em>Lydia</em> 和 <em>ReferenceError</em></li><li>C: <em>ReferenceError</em> 和 <em>21</em></li><li>D: <em>undefined</em> 和 <em>ReferenceError</em></li></ul><h3 id="_245-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_245-下面代码的输出是什么-c"><span>245. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>0 1 2</em> 和 <em>0 1 2</em></li><li>B: <em>0 1 2</em> 和 <em>3 3 3</em></li><li>C: <em>3 3 3</em> 和 <em>0 1 2</em></li></ul><h3 id="_246-下面代码的输出是什么-b" tabindex="-1"><a class="header-anchor" href="#_246-下面代码的输出是什么-b"><span>246. 下面代码的输出是什么？（ <em>B</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function">diameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">perimeter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>radius<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

shape<span class="token punctuation">.</span><span class="token function">diameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
shape<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>20</em> 和 <em>62.83185307179586</em></li><li>B: <em>20</em> 和 <em>NaN</em></li><li>C: <em>20</em> 和 <em>63</em></li><li>D: <em>NaN</em> 和 <em>63</em></li></ul><h3 id="_247-下面代码的输出是什么-a" tabindex="-1"><a class="header-anchor" href="#_247-下面代码的输出是什么-a"><span>247. 下面代码的输出是什么？（ <em>A</em> ）</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>+true;
!&quot;Lydia&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>1</em> 和 <em>false</em></li><li>B: <em>false</em> 和 <em>NaN</em></li><li>C: <em>false</em> 和 <em>false</em></li></ul><h3 id="_248-哪个选项是不正确的-a" tabindex="-1"><a class="header-anchor" href="#_248-哪个选项是不正确的-a"><span>248. 哪个选项是不正确的？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bird <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">&#39;small&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mouse <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Mickey&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">small</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>mouse.bird.size</em></li><li>B: <em>mouse[bird.size]</em></li><li>C: <em>mouse[bird[&quot;size&quot;]]</em></li><li>D: 以上选项都对</li></ul><h3 id="_249-下面代码的输出是什么-a" tabindex="-1"><a class="header-anchor" href="#_249-下面代码的输出是什么-a"><span>249. 下面代码的输出是什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">greeting</span><span class="token operator">:</span> <span class="token string">&#39;Hey!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> d<span class="token punctuation">;</span>

d <span class="token operator">=</span> c<span class="token punctuation">;</span>
c<span class="token punctuation">.</span>greeting <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>Hello</em></li><li>B: <em>undefined</em></li><li>C: <em>ReferenceError</em></li><li>D: <em>TypeError</em></li></ul><h3 id="_250-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_250-下面代码的输出是什么-c"><span>250. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">===</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>true</em> <em>false</em> <em>true</em></li><li>B: <em>false</em> <em>false</em> <em>true</em></li><li>C: <em>true</em> <em>false</em> <em>false</em></li><li>D: <em>false</em> <em>true</em> <em>true</em></li></ul><h3 id="_251-下面代码的输出是什么-d" tabindex="-1"><a class="header-anchor" href="#_251-下面代码的输出是什么-d"><span>251. 下面代码的输出是什么？（ <em>D</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Chameleon</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">colorChange</span><span class="token punctuation">(</span><span class="token parameter">newColor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>newColor <span class="token operator">=</span> newColor<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> newColor <span class="token operator">=</span> <span class="token string">&#39;green&#39;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>newColor <span class="token operator">=</span> newColor<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> freddie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chameleon</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">newColor</span><span class="token operator">:</span> <span class="token string">&#39;purple&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
freddie<span class="token punctuation">.</span><span class="token function">colorChange</span><span class="token punctuation">(</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>orange</em></li><li>B: <em>purple</em></li><li>C: <em>green</em></li><li>D: <em>TypeError</em></li></ul><h3 id="_252-下面代码的输出是什么-a" tabindex="-1"><a class="header-anchor" href="#_252-下面代码的输出是什么-a"><span>252. 下面代码的输出是什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> greeting<span class="token punctuation">;</span>
greetign <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Typo!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greetign<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>{}</em></li><li>B: <em>ReferenceError: greetign is not defined</em></li><li>C: <em>undefined</em></li></ul><h3 id="_253-当我们执行以下代码时会发生什么-a" tabindex="-1"><a class="header-anchor" href="#_253-当我们执行以下代码时会发生什么-a"><span>253. 当我们执行以下代码时会发生什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Woof!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bark<span class="token punctuation">.</span>animal <span class="token operator">=</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A 什么都不会发生</li><li>B: <em>SyntaxError. You cannot add properties to a function this way.</em></li><li>C: <em>undefined</em></li><li>D: <em>ReferenceError</em></li></ul><blockquote><p><strong>分析：</strong></p><p>因为函数也是对象！（原始类型之外的所有东西都是对象）</p><p>函数是一种特殊类型的对象，我们可以给函数添加属性，且此属性是可调用的。</p></blockquote><h3 id="_254-下面代码的输出是什么-a" tabindex="-1"><a class="header-anchor" href="#_254-下面代码的输出是什么-a"><span>254. 下面代码的输出是什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Lydia&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hallie&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Person<span class="token punctuation">.</span><span class="token function-variable function">getFullName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>TypeError</em></li><li>B: <em>SyntaxError</em></li><li>C: <em>Lydia Hallie</em></li><li>D: <em>undefined</em> <em>undefined</em></li></ul><h3 id="_255-下面代码的输出是什么-a" tabindex="-1"><a class="header-anchor" href="#_255-下面代码的输出是什么-a"><span>255. 下面代码的输出是什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> lydia <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Lydia&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hallie&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sarah <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Sarah&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Smith&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lydia<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sarah<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>Person { firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot; }</em> 和 <em>undefined</em></li><li>B: <em>Person { firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot; }</em> 和 <em>Person { firstName: &quot;Sarah&quot;, lastName: &quot;Smith&quot; }</em></li><li>C: <em>Person { firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot; }</em> 和 <em>{}</em></li><li>D: <em>Person { firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot; }</em> 和 <em>ReferenceError</em></li></ul><h3 id="_256-事件传播的三个阶段是什么-d" tabindex="-1"><a class="header-anchor" href="#_256-事件传播的三个阶段是什么-d"><span>256. 事件传播的三个阶段是什么？（ <em>D</em> ）</span></a></h3><ul><li>A: 目标 &gt; 捕获 &gt; 冒泡</li><li>B: 冒泡 &gt; 目标 &gt; 捕获</li><li>C: 目标 &gt; 冒泡 &gt; 捕获</li><li>D: 捕获 &gt; 目标 &gt; 冒泡</li></ul><h3 id="_257-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_257-下面代码的输出是什么-c"><span>257. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>NaN</em></li><li>B: <em>TypeError</em></li><li>C: <em>&quot;12&quot;</em></li><li>D: <em>3</em></li></ul><h3 id="_258-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_258-下面代码的输出是什么-c"><span>258. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>1 1 2</em></li><li>B: <em>1 2 2</em></li><li>C: <em>0 2 2</em></li><li>D: <em>0 1 2</em></li></ul><h3 id="_259-下面代码的输出是什么-b" tabindex="-1"><a class="header-anchor" href="#_259-下面代码的输出是什么-b"><span>259. 下面代码的输出是什么？（ <em>B</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPersonInfo</span><span class="token punctuation">(</span><span class="token parameter">one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token string">&#39;Lydia&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>

getPersonInfo<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>Lydia</em> <em>21</em> <em>[&quot;&quot;, &quot;is&quot;, &quot;years old&quot;]</em></li><li>B: <em>[&quot;&quot;, &quot;is&quot;, &quot;years old&quot;]</em> <em>Lydia</em> <em>21</em></li><li>C: <em>Lydia</em> <em>[&quot;&quot;, &quot;is&quot;, &quot;years old&quot;]</em> <em>21</em></li></ul><h3 id="_260-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_260-下面代码的输出是什么-c"><span>260. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You are an adult!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You are still an adult.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hmm.. You don&#39;t have an age I guess</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>You are an adult!</em></li><li>B: <em>You are still an adult.</em></li><li>C: <em>Hmm.. You don&#39;t have an age I guess</em></li></ul><h3 id="_261-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_261-下面代码的输出是什么-c"><span>261. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>&quot;number&quot;</em></li><li>B: <em>&quot;array&quot;</em></li><li>C: <em>&quot;object&quot;</em></li><li>D: <em>&quot;NaN&quot;</em></li></ul><h3 id="_262-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_262-下面代码的输出是什么-c"><span>262. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
  age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>21</em></li><li>B: <em>undefined</em></li><li>C: <em>ReferenceError</em></li><li>D: <em>TypeError</em></li></ul><h3 id="_263-下面代码的输出是什么-a" tabindex="-1"><a class="header-anchor" href="#_263-下面代码的输出是什么-a"><span>263. 下面代码的输出是什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;10*10+5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>A: <em>105</em></li><li>B: <em>&quot;105&quot;</em></li><li>C: <em>TypeError</em></li><li>D: <em>&quot;10*10+5&quot;</em></li></ul><h3 id="_264-cool-secret-可以访问多长时间-b" tabindex="-1"><a class="header-anchor" href="#_264-cool-secret-可以访问多长时间-b"><span>264. <em>cool_secret</em> 可以访问多长时间？（ <em>B</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;cool_secret&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>A：永远，数据不会丢失。</li><li>B：用户关闭选项卡时。</li><li>C：当用户关闭整个浏览器时，不仅是选项卡。</li><li>D：用户关闭计算机时。</li></ul><h3 id="_265-下面代码的输出是什么-b" tabindex="-1"><a class="header-anchor" href="#_265-下面代码的输出是什么-b"><span>265. 下面代码的输出是什么？（ <em>B</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>8</em></li><li>B: <em>10</em></li><li>C: <em>SyntaxError</em></li><li>D: <em>ReferenceError</em></li></ul><h3 id="_266-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_266-下面代码的输出是什么-c"><span>266. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>false</em> <em>true</em> <em>false</em> <em>true</em></li><li>B: <em>false</em> <em>true</em> <em>true</em> <em>true</em></li><li>C: <em>true</em> <em>true</em> <em>false</em> <em>true</em></li><li>D: <em>true</em> <em>true</em> <em>true</em> <em>true</em></li></ul><h3 id="_267-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_267-下面代码的输出是什么-c"><span>267. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;three&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>{ a: &quot;one&quot;, b: &quot;two&quot; }</em></li><li>B: <em>{ b: &quot;two&quot;, a: &quot;three&quot; }</em></li><li>C: <em>{ a: &quot;three&quot;, b: &quot;two&quot; }</em></li><li>D: <em>SyntaxError</em></li></ul><h3 id="_268-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_268-下面代码的输出是什么-c"><span>268. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>1 2</em></li><li>B: <em>1 2 3</em></li><li>C: <em>1 2 4</em></li><li>D: <em>1 3 4</em></li></ul><h3 id="_269-下面代码的输出是什么-a" tabindex="-1"><a class="header-anchor" href="#_269-下面代码的输出是什么-a"><span>269. 下面代码的输出是什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">giveLydiaPizza</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;Just give Lydia pizza already!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Lydia&#39;</span><span class="token punctuation">;</span>

name<span class="token punctuation">.</span><span class="token function">giveLydiaPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>&quot;Just give Lydia pizza already!&quot;</em></li><li>B: <em>TypeError: not a function</em></li><li>C: <em>SyntaxError</em></li><li>D: <em>undefined</em></li></ul><h3 id="_270-下面代码的输出是什么-b" tabindex="-1"><a class="header-anchor" href="#_270-下面代码的输出是什么-b"><span>270. 下面代码的输出是什么？（ <em>B</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>123</em></li><li>B: <em>456</em></li><li>C: <em>undefined</em></li><li>D: <em>ReferenceError</em></li></ul><h3 id="_271-下面代码的输出是什么-b" tabindex="-1"><a class="header-anchor" href="#_271-下面代码的输出是什么-b"><span>271. 下面代码的输出是什么？（ <em>B</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;First&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Second&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Third&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>First</em> <em>Second</em> <em>Third</em></li><li>B: <em>First</em> <em>Third</em> <em>Second</em></li><li>C: <em>Second</em> <em>First</em> <em>Third</em></li><li>D: <em>Second</em> <em>Third</em> <em>First</em></li></ul><h3 id="_272-单击按钮时-event-target-是什么-c" tabindex="-1"><a class="header-anchor" href="#_272-单击按钮时-event-target-是什么-c"><span>272. 单击按钮时 <em>event.target</em> 是什么？（ <em>C</em> ）</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;first div&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;second div&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>Click!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>div</em> 外部</li><li>B: <em>div</em> 内部</li><li>C: <em>button</em></li><li>D: 所有嵌套元素的数组</li></ul><h3 id="_273-单击下面的-html-片段打印的内容是什么-a" tabindex="-1"><a class="header-anchor" href="#_273-单击下面的-html-片段打印的内容是什么-a"><span>273. 单击下面的 <em>html</em> 片段打印的内容是什么？（ <em>A</em> ）</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>Click here!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>p</em> <em>div</em></li><li>B: <em>div</em> <em>p</em></li><li>C: <em>p</em></li><li>D: <em>div</em></li></ul><h3 id="_274-下面代码的输出是什么-d" tabindex="-1"><a class="header-anchor" href="#_274-下面代码的输出是什么-d"><span>274. 下面代码的输出是什么？（ <em>D</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Lydia&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">sayHi</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sayHi</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>undefined is 21</em> <em>Lydia is 21</em></li><li>B: <em>function</em> <em>function</em></li><li>C: <em>Lydia is 21</em> <em>Lydia is 21</em></li><li>D: <em>Lydia is 21</em> <em>function</em></li></ul><h3 id="_275-下面代码的输出是什么-b" tabindex="-1"><a class="header-anchor" href="#_275-下面代码的输出是什么-b"><span>275. 下面代码的输出是什么？（ <em>B</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">typeof</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>&quot;object&quot;</em></li><li>B: <em>&quot;number&quot;</em></li><li>C: <em>&quot;function&quot;</em></li><li>D: <em>&quot;undefined&quot;</em></li></ul><h3 id="_276-下面这些值哪些是假值-a" tabindex="-1"><a class="header-anchor" href="#_276-下面这些值哪些是假值-a"><span>276. 下面这些值哪些是假值？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">undefined</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>0</em> <em>&quot;&quot;</em> <em>undefined</em></li><li>B: <em>0</em> <em>new Number(0)</em> <em>&quot;&quot;</em> <em>new Boolean(false)</em> <em>undefined</em></li><li>C: <em>0</em> <em>&quot;&quot;</em> <em>new Boolean(false)</em> <em>undefined</em></li><li>D: 所有都是假值。</li></ul><h3 id="_278-下面代码的输出是什么-b" tabindex="-1"><a class="header-anchor" href="#_278-下面代码的输出是什么-b"><span>278. 下面代码的输出是什么？（ <em>B</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>A: <em>&quot;number&quot;</em></li><li>B: <em>&quot;string&quot;</em></li><li>C: <em>&quot;object&quot;</em></li><li>D: <em>&quot;undefined&quot;</em></li></ul><h3 id="_279-下面代码的输出是什么-c" tabindex="-1"><a class="header-anchor" href="#_279-下面代码的输出是什么-c"><span>279. 下面代码的输出是什么？（ <em>C</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
numbers<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>[1, 2, 3, 7 x null, 11]</em></li><li>B: <em>[1, 2, 3, 11]</em></li><li>C: <em>[1, 2, 3, 7 x empty, 11]</em></li><li>D: <em>SyntaxError</em></li></ul><h3 id="_280-下面代码的输出是什么-a" tabindex="-1"><a class="header-anchor" href="#_280-下面代码的输出是什么-a"><span>280. 下面代码的输出是什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>1</em> <em>undefined</em> <em>2</em></li><li>B: <em>undefined</em> <em>undefined</em> <em>undefined</em></li><li>C: <em>1</em> <em>1</em> <em>2</em></li><li>D: <em>1</em> <em>undefined</em> <em>undefined</em></li></ul><h3 id="_281-javascript-中的所有内容都是-a" tabindex="-1"><a class="header-anchor" href="#_281-javascript-中的所有内容都是-a"><span>281. <em>JavaScript</em> 中的所有内容都是…（ <em>A</em> ）</span></a></h3><ul><li>A：原始或对象</li><li>B：函数或对象</li><li>C：技巧问题！只有对象</li><li>D：数字或对象</li></ul><h3 id="_282-下面代码的输出是什么" tabindex="-1"><a class="header-anchor" href="#_282-下面代码的输出是什么"><span>282. 下面代码的输出是什么?</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>[0, 1, 2, 3, 1, 2]</em></li><li>B: <em>[6, 1, 2]</em></li><li>C: <em>[1, 2, 0, 1, 2, 3]</em></li><li>D: <em>[1, 2, 6]</em></li></ul><h3 id="_283-下面代码的输出是什么-b" tabindex="-1"><a class="header-anchor" href="#_283-下面代码的输出是什么-b"><span>283. 下面代码的输出是什么？（ <em>B</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: <em>false</em> <em>true</em> <em>false</em></li><li>B: <em>false</em> <em>false</em> <em>true</em></li><li>C: <em>false</em> <em>true</em> <em>true</em></li><li>D: <em>true</em> <em>true</em> <em>false</em></li></ul><h3 id="_284-setinterval-方法的返回值什么-a" tabindex="-1"><a class="header-anchor" href="#_284-setinterval-方法的返回值什么-a"><span>284. <em>setInterval</em> 方法的返回值什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>A：一个唯一的 <em>id</em></li><li>B：指定的毫秒数</li><li>C：传递的函数</li><li>D：<em>undefined</em></li></ul><h3 id="_285-下面代码的返回值是什么-a" tabindex="-1"><a class="header-anchor" href="#_285-下面代码的返回值是什么-a"><span>285. 下面代码的返回值是什么？（ <em>A</em> ）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">&#39;Lydia&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>A: <em>[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]</em></li><li>B: <em>[&quot;Lydia&quot;]</em></li><li>C: <em>[[], &quot;Lydia&quot;]</em></li><li>D: <em>[[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]]</em></li></ul><h3 id="_286-document-write-和-innerhtml-有哪些区别" tabindex="-1"><a class="header-anchor" href="#_286-document-write-和-innerhtml-有哪些区别"><span>286. <em>document.write</em> 和 <em>innerHTML</em> 有哪些区别？</span></a></h3><h3 id="_287-假设有两个变量-a-和-b-他们的值都是数字-如何在不借用第三个变量的情况下-将两个变量的值对调" tabindex="-1"><a class="header-anchor" href="#_287-假设有两个变量-a-和-b-他们的值都是数字-如何在不借用第三个变量的情况下-将两个变量的值对调"><span>287. 假设有两个变量 <em>a</em> 和 <em>b</em>，他们的值都是数字，如何在不借用第三个变量的情况下，将两个变量的值对调？</span></a></h3><h3 id="_288-前端为什么提倡模块化开发" tabindex="-1"><a class="header-anchor" href="#_288-前端为什么提倡模块化开发"><span>288. 前端为什么提倡模块化开发？</span></a></h3><h3 id="_289-请解释-jsonp-的原理-并用代码描述其过程。" tabindex="-1"><a class="header-anchor" href="#_289-请解释-jsonp-的原理-并用代码描述其过程。"><span>289. 请解释 <em>JSONP</em> 的原理，并用代码描述其过程。</span></a></h3><h3 id="_290-列举几种-javascript-中数据类型的强制转换和隐式转换。" tabindex="-1"><a class="header-anchor" href="#_290-列举几种-javascript-中数据类型的强制转换和隐式转换。"><span>290. 列举几种 <em>JavaScript</em> 中数据类型的强制转换和隐式转换。</span></a></h3><h3 id="_291-分析以下代码的执行结果并解释为什么。" tabindex="-1"><a class="header-anchor" href="#_291-分析以下代码的执行结果并解释为什么。"><span>291. 分析以下代码的执行结果并解释为什么。</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
a<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_292-分析以下代码的执行结果并解释为什么。" tabindex="-1"><a class="header-anchor" href="#_292-分析以下代码的执行结果并解释为什么。"><span>292. 分析以下代码的执行结果并解释为什么。</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// example 1</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>
  c <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// example 2</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  c <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// example 3</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;456&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_293-下面的代码打印什么内容-为什么" tabindex="-1"><a class="header-anchor" href="#_293-下面的代码打印什么内容-为什么"><span>293. 下面的代码打印什么内容？为什么？</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_294-下面代码中-a-在什么情况下会执行输出语句打印-1" tabindex="-1"><a class="header-anchor" href="#_294-下面代码中-a-在什么情况下会执行输出语句打印-1"><span>294. 下面代码中，<em>a</em> 在什么情况下会执行输出语句打印 <em>1</em> ？</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_295-介绍前端模块化的发展。" tabindex="-1"><a class="header-anchor" href="#_295-介绍前端模块化的发展。"><span>295. 介绍前端模块化的发展。</span></a></h3><h3 id="_296-请指出-document-onload-和-document-ready-两个事件的区别" tabindex="-1"><a class="header-anchor" href="#_296-请指出-document-onload-和-document-ready-两个事件的区别"><span>296. 请指出 <em>document.onload</em> 和 document.ready 两个事件的区别</span></a></h3><h3 id="_297-表单元素的readonly-和-disabled-两个属性有什么区别" tabindex="-1"><a class="header-anchor" href="#_297-表单元素的readonly-和-disabled-两个属性有什么区别"><span>297. 表单元素的<em>readonly</em> 和 <em>disabled</em> 两个属性有什么区别？</span></a></h3><h3 id="_298-列举几种你知道的数组排序的方法。" tabindex="-1"><a class="header-anchor" href="#_298-列举几种你知道的数组排序的方法。"><span>298. 列举几种你知道的数组排序的方法。</span></a></h3><h3 id="_299-区分什么是-客户区坐标-、-页面坐标-、-屏幕坐标" tabindex="-1"><a class="header-anchor" href="#_299-区分什么是-客户区坐标-、-页面坐标-、-屏幕坐标"><span>299. 区分什么是“客户区坐标”、“页面坐标”、“屏幕坐标”？</span></a></h3><h3 id="_300-如何编写高性能的-javascript" tabindex="-1"><a class="header-anchor" href="#_300-如何编写高性能的-javascript"><span>300. 如何编写高性能的 <em>JavaScript</em>？</span></a></h3><h3 id="_301-下面的代码输出什么" tabindex="-1"><a class="header-anchor" href="#_301-下面的代码输出什么"><span>301. 下面的代码输出什么？</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,416),l=[p];function c(o,i){return s(),a("div",null,l)}const r=n(t,[["render",c],["__file","javascriptmianshiti.html.vue"]]),d=JSON.parse(`{"path":"/blogs/interview/javascriptmianshiti.html","title":"JavaScript面试题","lang":"zh-CN","frontmatter":{"title":"JavaScript面试题","date":"2024-01-22T00:00:00.000Z","password":["ef54c05987923ceb9bf946e72ba7c6d6"],"tags":["interview"],"categories":["interview"]},"headers":[{"level":3,"title":"1. 根据下面 ES6 构造函数的书写方式，要求写出 ES5 的","slug":"_1-根据下面-es6-构造函数的书写方式-要求写出-es5-的","link":"#_1-根据下面-es6-构造函数的书写方式-要求写出-es5-的","children":[]},{"level":3,"title":"2. 数组去重有哪些方法？（美团 19 年）","slug":"_2-数组去重有哪些方法-美团-19-年","link":"#_2-数组去重有哪些方法-美团-19-年","children":[]},{"level":3,"title":"3. 描述下列代码的执行结果","slug":"_3-描述下列代码的执行结果","link":"#_3-描述下列代码的执行结果","children":[]},{"level":3,"title":"4. 描述下列代码的执行结果","slug":"_4-描述下列代码的执行结果","link":"#_4-描述下列代码的执行结果","children":[]},{"level":3,"title":"5. 描述下列代码的执行结果","slug":"_5-描述下列代码的执行结果","link":"#_5-描述下列代码的执行结果","children":[]},{"level":3,"title":"6. 描述下列代码的执行结果","slug":"_6-描述下列代码的执行结果","link":"#_6-描述下列代码的执行结果","children":[]},{"level":3,"title":"7. 描述下列代码的执行结果","slug":"_7-描述下列代码的执行结果","link":"#_7-描述下列代码的执行结果","children":[]},{"level":3,"title":"8. 箭头函数有哪些特点","slug":"_8-箭头函数有哪些特点","link":"#_8-箭头函数有哪些特点","children":[]},{"level":3,"title":"9. 说一说类的继承","slug":"_9-说一说类的继承","link":"#_9-说一说类的继承","children":[]},{"level":3,"title":"10. new 操作符都做了哪些事？","slug":"_10-new-操作符都做了哪些事","link":"#_10-new-操作符都做了哪些事","children":[]},{"level":3,"title":"11. call、apply、bind 的区别 ？","slug":"_11-call、apply、bind-的区别","link":"#_11-call、apply、bind-的区别","children":[]},{"level":3,"title":"12. 事件循环机制（宏任务、微任务）","slug":"_12-事件循环机制-宏任务、微任务","link":"#_12-事件循环机制-宏任务、微任务","children":[]},{"level":3,"title":"13. 你了解 node 中的事件循环机制吗？node11 版本以后有什么改变","slug":"_13-你了解-node-中的事件循环机制吗-node11-版本以后有什么改变","link":"#_13-你了解-node-中的事件循环机制吗-node11-版本以后有什么改变","children":[]},{"level":3,"title":"14. 什么是函数柯里化？","slug":"_14-什么是函数柯里化","link":"#_14-什么是函数柯里化","children":[]},{"level":3,"title":"15. promise.all 方法的使用场景？数组中必须每一项都是 promise 对象吗？不是 promise 对象会如何处理 ？","slug":"_15-promise-all-方法的使用场景-数组中必须每一项都是-promise-对象吗-不是-promise-对象会如何处理","link":"#_15-promise-all-方法的使用场景-数组中必须每一项都是-promise-对象吗-不是-promise-对象会如何处理","children":[]},{"level":3,"title":"16. this 的指向哪几种 ？","slug":"_16-this-的指向哪几种","link":"#_16-this-的指向哪几种","children":[]},{"level":3,"title":"17. JS 中继承实现的几种方式","slug":"_17-js-中继承实现的几种方式","link":"#_17-js-中继承实现的几种方式","children":[]},{"level":3,"title":"18. 什么是事件监听","slug":"_18-什么是事件监听","link":"#_18-什么是事件监听","children":[]},{"level":3,"title":"19. 什么是 js 的闭包？有什么作用？","slug":"_19-什么是-js-的闭包-有什么作用","link":"#_19-什么是-js-的闭包-有什么作用","children":[]},{"level":3,"title":"20. 事件委托以及冒泡原理","slug":"_20-事件委托以及冒泡原理","link":"#_20-事件委托以及冒泡原理","children":[]},{"level":3,"title":"21. let const var 的区别？什么是块级作用域？如何用？","slug":"_21-let-const-var-的区别-什么是块级作用域-如何用","link":"#_21-let-const-var-的区别-什么是块级作用域-如何用","children":[]},{"level":3,"title":"22. ES5 的方法实现块级作用域（立即执行函数） ES6 呢？","slug":"_22-es5-的方法实现块级作用域-立即执行函数-es6-呢","link":"#_22-es5-的方法实现块级作用域-立即执行函数-es6-呢","children":[]},{"level":3,"title":"23. ES6 箭头函数的特性","slug":"_23-es6-箭头函数的特性","link":"#_23-es6-箭头函数的特性","children":[]},{"level":3,"title":"24. 箭头函数与普通函数的区别 ？","slug":"_24-箭头函数与普通函数的区别","link":"#_24-箭头函数与普通函数的区别","children":[]},{"level":3,"title":"25. JS 的基本数据类型有哪些？基本数据类型和引用数据类型的区别","slug":"_25-js-的基本数据类型有哪些-基本数据类型和引用数据类型的区别","link":"#_25-js-的基本数据类型有哪些-基本数据类型和引用数据类型的区别","children":[]},{"level":3,"title":"26. NaN 是什么的缩写","slug":"_26-nan-是什么的缩写","link":"#_26-nan-是什么的缩写","children":[]},{"level":3,"title":"27. JS 的作用域类型","slug":"_27-js-的作用域类型","link":"#_27-js-的作用域类型","children":[]},{"level":3,"title":"28. undefined==null 返回的结果是什么？undefined 与 null 的区别在哪？","slug":"_28-undefined-null-返回的结果是什么-undefined-与-null-的区别在哪","link":"#_28-undefined-null-返回的结果是什么-undefined-与-null-的区别在哪","children":[]},{"level":3,"title":"29. 写一个函数判断变量类型","slug":"_29-写一个函数判断变量类型","link":"#_29-写一个函数判断变量类型","children":[]},{"level":3,"title":"30. js 的异步处理函数","slug":"_30-js-的异步处理函数","link":"#_30-js-的异步处理函数","children":[]},{"level":3,"title":"31. defer 与 async 的区别","slug":"_31-defer-与-async-的区别","link":"#_31-defer-与-async-的区别","children":[]},{"level":3,"title":"32. 浏览器事件循环和任务队列","slug":"_32-浏览器事件循环和任务队列","link":"#_32-浏览器事件循环和任务队列","children":[]},{"level":3,"title":"33. 原型与原型链 （美团 19 年）","slug":"_33-原型与原型链-美团-19-年","link":"#_33-原型与原型链-美团-19-年","children":[]},{"level":3,"title":"34. 作用域与作用域链 （美团 19 年）","slug":"_34-作用域与作用域链-美团-19-年","link":"#_34-作用域与作用域链-美团-19-年","children":[]},{"level":3,"title":"35. 闭包及应用场景以及闭包缺点 （美团 19 年）","slug":"_35-闭包及应用场景以及闭包缺点-美团-19-年","link":"#_35-闭包及应用场景以及闭包缺点-美团-19-年","children":[]},{"level":3,"title":"36. 继承方式 （美团 19 年）","slug":"_36-继承方式-美团-19-年","link":"#_36-继承方式-美团-19-年","children":[]},{"level":3,"title":"37. 原始值与引用值 （美团 19 年）","slug":"_37-原始值与引用值-美团-19-年","link":"#_37-原始值与引用值-美团-19-年","children":[]},{"level":3,"title":"38. 描述下列代码的执行结果","slug":"_38-描述下列代码的执行结果","link":"#_38-描述下列代码的执行结果","children":[]},{"level":3,"title":"39. 如何判断数组或对象（美团 19 年）","slug":"_39-如何判断数组或对象-美团-19-年","link":"#_39-如何判断数组或对象-美团-19-年","children":[]},{"level":3,"title":"40. 对象深拷贝与浅拷贝，单独问了 Object.assign（美团 19 年）","slug":"_40-对象深拷贝与浅拷贝-单独问了-object-assign-美团-19-年","link":"#_40-对象深拷贝与浅拷贝-单独问了-object-assign-美团-19-年","children":[]},{"level":3,"title":"42. 说说 instanceof 原理，并回答下面的题目（美团 19 年）","slug":"_42-说说-instanceof-原理-并回答下面的题目-美团-19-年","link":"#_42-说说-instanceof-原理-并回答下面的题目-美团-19-年","children":[]},{"level":3,"title":"43. 内存泄漏（美团 19 年）","slug":"_43-内存泄漏-美团-19-年","link":"#_43-内存泄漏-美团-19-年","children":[]},{"level":3,"title":"44. ES6 新增哪些东西？让你自己说（美团 19 年）","slug":"_44-es6-新增哪些东西-让你自己说-美团-19-年","link":"#_44-es6-新增哪些东西-让你自己说-美团-19-年","children":[]},{"level":3,"title":"45. weakmap、weakset（美团 19 年）","slug":"_45-weakmap、weakset-美团-19-年","link":"#_45-weakmap、weakset-美团-19-年","children":[]},{"level":3,"title":"46. 为什么 ES6 会新增 Promise（美团 19 年）","slug":"_46-为什么-es6-会新增-promise-美团-19-年","link":"#_46-为什么-es6-会新增-promise-美团-19-年","children":[]},{"level":3,"title":"47. ES5 实现继承？（虾皮）","slug":"_47-es5-实现继承-虾皮","link":"#_47-es5-实现继承-虾皮","children":[]},{"level":3,"title":"48. 科里化？（搜狗）","slug":"_48-科里化-搜狗","link":"#_48-科里化-搜狗","children":[]},{"level":3,"title":"49. 防抖和节流？（虾皮）","slug":"_49-防抖和节流-虾皮","link":"#_49-防抖和节流-虾皮","children":[]},{"level":3,"title":"50. 闭包？（好未来---探讨了 40 分钟）","slug":"_50-闭包-好未来-探讨了-40-分钟","link":"#_50-闭包-好未来-探讨了-40-分钟","children":[]},{"level":3,"title":"51. 原型和原型链？（字节）","slug":"_51-原型和原型链-字节","link":"#_51-原型和原型链-字节","children":[]},{"level":3,"title":"52. 排序算法---（时间复杂度、空间复杂度）","slug":"_52-排序算法-时间复杂度、空间复杂度","link":"#_52-排序算法-时间复杂度、空间复杂度","children":[]},{"level":3,"title":"53. 浏览器事件循环和 node 事件循环（搜狗）","slug":"_53-浏览器事件循环和-node-事件循环-搜狗","link":"#_53-浏览器事件循环和-node-事件循环-搜狗","children":[]},{"level":3,"title":"54. 闭包的好处","slug":"_54-闭包的好处","link":"#_54-闭包的好处","children":[]},{"level":3,"title":"55. let、const、var 的区别","slug":"_55-let、const、var-的区别","link":"#_55-let、const、var-的区别","children":[]},{"level":3,"title":"56. 闭包、作用域（可以扩充到作用域链）","slug":"_56-闭包、作用域-可以扩充到作用域链","link":"#_56-闭包、作用域-可以扩充到作用域链","children":[]},{"level":3,"title":"57. Promise","slug":"_57-promise","link":"#_57-promise","children":[]},{"level":3,"title":"58. 实现一个函数,对一个 url 进行请求,失败就再次请求,超过最大次数就走失败回调,任何一次成功都走成功回调","slug":"_58-实现一个函数-对一个-url-进行请求-失败就再次请求-超过最大次数就走失败回调-任何一次成功都走成功回调","link":"#_58-实现一个函数-对一个-url-进行请求-失败就再次请求-超过最大次数就走失败回调-任何一次成功都走成功回调","children":[]},{"level":3,"title":"59. 冒泡排序","slug":"_59-冒泡排序","link":"#_59-冒泡排序","children":[]},{"level":3,"title":"60. 数组降维","slug":"_60-数组降维","link":"#_60-数组降维","children":[]},{"level":3,"title":"61. call apply bind","slug":"_61-call-apply-bind","link":"#_61-call-apply-bind","children":[]},{"level":3,"title":"62. promise 代码题","slug":"_62-promise-代码题","link":"#_62-promise-代码题","children":[]},{"level":3,"title":"63. proxy 是实现代理，可以改变 js 底层的实现方式, 然后说了一下和 Object.defineProperty 的区别","slug":"_63-proxy-是实现代理-可以改变-js-底层的实现方式-然后说了一下和-object-defineproperty-的区别","link":"#_63-proxy-是实现代理-可以改变-js-底层的实现方式-然后说了一下和-object-defineproperty-的区别","children":[]},{"level":3,"title":"64. 使用 ES5 与 ES6 分别实现继承","slug":"_64-使用-es5-与-es6-分别实现继承","link":"#_64-使用-es5-与-es6-分别实现继承","children":[]},{"level":3,"title":"65. 深拷贝","slug":"_65-深拷贝","link":"#_65-深拷贝","children":[]},{"level":3,"title":"66. async 与 await 的作用","slug":"_66-async-与-await-的作用","link":"#_66-async-与-await-的作用","children":[]},{"level":3,"title":"67. 数据的基础类型（原始类型）有哪些","slug":"_67-数据的基础类型-原始类型-有哪些","link":"#_67-数据的基础类型-原始类型-有哪些","children":[]},{"level":3,"title":"68. typeof null 返回结果","slug":"_68-typeof-null-返回结果","link":"#_68-typeof-null-返回结果","children":[]},{"level":3,"title":"69. 对变量进行类型判断的方式有哪些","slug":"_69-对变量进行类型判断的方式有哪些","link":"#_69-对变量进行类型判断的方式有哪些","children":[]},{"level":3,"title":"70. typeof 与 instanceof 的区别？ instanceof 是如何实现？","slug":"_70-typeof-与-instanceof-的区别-instanceof-是如何实现","link":"#_70-typeof-与-instanceof-的区别-instanceof-是如何实现","children":[]},{"level":3,"title":"71. 引用类型有哪些，有什么特点","slug":"_71-引用类型有哪些-有什么特点","link":"#_71-引用类型有哪些-有什么特点","children":[]},{"level":3,"title":"72. 如何得到一个变量的类型---指函数封装实现","slug":"_72-如何得到一个变量的类型-指函数封装实现","link":"#_72-如何得到一个变量的类型-指函数封装实现","children":[]},{"level":3,"title":"73. 什么是作用域、闭包","slug":"_73-什么是作用域、闭包","link":"#_73-什么是作用域、闭包","children":[]},{"level":3,"title":"74. 闭包的缺点是什么？闭包的应用场景有哪些？怎么销毁闭包？","slug":"_74-闭包的缺点是什么-闭包的应用场景有哪些-怎么销毁闭包","link":"#_74-闭包的缺点是什么-闭包的应用场景有哪些-怎么销毁闭包","children":[]},{"level":3,"title":"75. JS的垃圾回收站机制","slug":"_75-js的垃圾回收站机制","link":"#_75-js的垃圾回收站机制","children":[]},{"level":3,"title":"76. 什么是作用域链、原型链","slug":"_76-什么是作用域链、原型链","link":"#_76-什么是作用域链、原型链","children":[]},{"level":3,"title":"77. new 一个构造函数发生了什么","slug":"_77-new-一个构造函数发生了什么","link":"#_77-new-一个构造函数发生了什么","children":[]},{"level":3,"title":"78. 对一个构造函数实例化后. 它的原型链指向什么","slug":"_78-对一个构造函数实例化后-它的原型链指向什么","link":"#_78-对一个构造函数实例化后-它的原型链指向什么","children":[]},{"level":3,"title":"79. 什么是变量提升","slug":"_79-什么是变量提升","link":"#_79-什么是变量提升","children":[]},{"level":3,"title":"80. == 和 === 的区别是什么","slug":"_80-和-的区别是什么","link":"#_80-和-的区别是什么","children":[]},{"level":3,"title":"81. Object.is 方法比较的是什么","slug":"_81-object-is-方法比较的是什么","link":"#_81-object-is-方法比较的是什么","children":[]},{"level":3,"title":"82. 基础数据类型和引用数据类型，哪个是保存在栈内存中？哪个是在堆内存中？","slug":"_82-基础数据类型和引用数据类型-哪个是保存在栈内存中-哪个是在堆内存中","link":"#_82-基础数据类型和引用数据类型-哪个是保存在栈内存中-哪个是在堆内存中","children":[]},{"level":3,"title":"83. 箭头函数解决了什么问题？","slug":"_83-箭头函数解决了什么问题","link":"#_83-箭头函数解决了什么问题","children":[]},{"level":3,"title":"84. new 一个箭头函数后，它的 this 指向什么？","slug":"_84-new-一个箭头函数后-它的-this-指向什么","link":"#_84-new-一个箭头函数后-它的-this-指向什么","children":[]},{"level":3,"title":"85. promise 的其他方法有用过吗？如 all、race。请说下这两者的区别","slug":"_85-promise-的其他方法有用过吗-如-all、race。请说下这两者的区别","link":"#_85-promise-的其他方法有用过吗-如-all、race。请说下这两者的区别","children":[]},{"level":3,"title":"86. class 是如何实现的","slug":"_86-class-是如何实现的","link":"#_86-class-是如何实现的","children":[]},{"level":3,"title":"87. let、const、var 的区别","slug":"_87-let、const、var-的区别","link":"#_87-let、const、var-的区别","children":[]},{"level":3,"title":"88. ES6 中模块化导入和导出与 common.js 有什么区别","slug":"_88-es6-中模块化导入和导出与-common-js-有什么区别","link":"#_88-es6-中模块化导入和导出与-common-js-有什么区别","children":[]},{"level":3,"title":"89. 说一下普通函数和箭头函数的区别","slug":"_89-说一下普通函数和箭头函数的区别","link":"#_89-说一下普通函数和箭头函数的区别","children":[]},{"level":3,"title":"90. 说一下 promise 和 async 和 await 什么关系","slug":"_90-说一下-promise-和-async-和-await-什么关系","link":"#_90-说一下-promise-和-async-和-await-什么关系","children":[]},{"level":3,"title":"91. 说一下你学习过的有关 ES6 的知识点","slug":"_91-说一下你学习过的有关-es6-的知识点","link":"#_91-说一下你学习过的有关-es6-的知识点","children":[]},{"level":3,"title":"92. 了解过 js 中 arguments 吗？接收的是实参还是形参？","slug":"_92-了解过-js-中-arguments-吗-接收的是实参还是形参","link":"#_92-了解过-js-中-arguments-吗-接收的是实参还是形参","children":[]},{"level":3,"title":"93. ES6 相比于 ES5 有什么变化","slug":"_93-es6-相比于-es5-有什么变化","link":"#_93-es6-相比于-es5-有什么变化","children":[]},{"level":3,"title":"94. 强制类型转换方法有哪些？","slug":"_94-强制类型转换方法有哪些","link":"#_94-强制类型转换方法有哪些","children":[]},{"level":3,"title":"95. 纯函数","slug":"_95-纯函数","link":"#_95-纯函数","children":[]},{"level":3,"title":"96. JS 模块化","slug":"_96-js-模块化","link":"#_96-js-模块化","children":[]},{"level":3,"title":"97. 看过 jquery 源码吗？","slug":"_97-看过-jquery-源码吗","link":"#_97-看过-jquery-源码吗","children":[]},{"level":3,"title":"98. 说一下 js 中的 this","slug":"_98-说一下-js-中的-this","link":"#_98-说一下-js-中的-this","children":[]},{"level":3,"title":"99. apply call bind 区别，手写","slug":"_99-apply-call-bind-区别-手写","link":"#_99-apply-call-bind-区别-手写","children":[]},{"level":3,"title":"100. 手写 reduce flat","slug":"_100-手写-reduce-flat","link":"#_100-手写-reduce-flat","children":[]},{"level":3,"title":"101. == 隐试转换的原理？是怎么转换的","slug":"_101-隐试转换的原理-是怎么转换的","link":"#_101-隐试转换的原理-是怎么转换的","children":[]},{"level":3,"title":"102. ['1', '2', '3'].map(parseInt) 结果是什么，为什么 （字节）","slug":"_102-1-2-3-map-parseint-结果是什么-为什么-字节","link":"#_102-1-2-3-map-parseint-结果是什么-为什么-字节","children":[]},{"level":3,"title":"103. 防抖，节流是什么，如何实现 （字节）","slug":"_103-防抖-节流是什么-如何实现-字节","link":"#_103-防抖-节流是什么-如何实现-字节","children":[]},{"level":3,"title":"104. 介绍下 Set、Map、WeakSet 和 WeakMap 的区别（字节）","slug":"_104-介绍下-set、map、weakset-和-weakmap-的区别-字节","link":"#_104-介绍下-set、map、weakset-和-weakmap-的区别-字节","children":[]},{"level":3,"title":"105. setTimeout、Promise、Async/Await 的区别（字节）","slug":"_105-settimeout、promise、async-await-的区别-字节","link":"#_105-settimeout、promise、async-await-的区别-字节","children":[]},{"level":3,"title":"106. Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？（字节）","slug":"_106-promise-构造函数是同步执行还是异步执行-那么-then-方法呢-字节","link":"#_106-promise-构造函数是同步执行还是异步执行-那么-then-方法呢-字节","children":[]},{"level":3,"title":"107. 情人节福利题，如何实现一个 new （字节）","slug":"_107-情人节福利题-如何实现一个-new-字节","link":"#_107-情人节福利题-如何实现一个-new-字节","children":[]},{"level":3,"title":"108. 实现一个 sleep 函数（字节）","slug":"_108-实现一个-sleep-函数-字节","link":"#_108-实现一个-sleep-函数-字节","children":[]},{"level":3,"title":"109. 使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果 （字节）","slug":"_109-使用-sort-对数组-3-15-8-29-102-22-进行排序-输出结果-字节","link":"#_109-使用-sort-对数组-3-15-8-29-102-22-进行排序-输出结果-字节","children":[]},{"level":3,"title":"110. 实现 5.add(3).sub(2) (百度)","slug":"_110-实现-5-add-3-sub-2-百度","link":"#_110-实现-5-add-3-sub-2-百度","children":[]},{"level":3,"title":"111. 给定两个数组，求交集","slug":"_111-给定两个数组-求交集","link":"#_111-给定两个数组-求交集","children":[]},{"level":3,"title":"112. 为什么普通 for 循环的性能远远高于 forEach 的性能，请解释其中的原因。","slug":"_112-为什么普通-for-循环的性能远远高于-foreach-的性能-请解释其中的原因。","link":"#_112-为什么普通-for-循环的性能远远高于-foreach-的性能-请解释其中的原因。","children":[]},{"level":3,"title":"113. 实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T，T 的长度是 m，若存在返回所在位置。","slug":"_113-实现一个字符串匹配算法-从长度为-n-的字符串-s-中-查找是否存在字符串-t-t-的长度是-m-若存在返回所在位置。","link":"#_113-实现一个字符串匹配算法-从长度为-n-的字符串-s-中-查找是否存在字符串-t-t-的长度是-m-若存在返回所在位置。","children":[]},{"level":3,"title":"114. 使用 JavaScript Proxy 实现简单的数据绑定","slug":"_114-使用-javascript-proxy-实现简单的数据绑定","link":"#_114-使用-javascript-proxy-实现简单的数据绑定","children":[]},{"level":3,"title":"115. 数组里面有 10 万个数据，取第一个元素和第 10 万个元素的时间相差多少（字节）","slug":"_115-数组里面有-10-万个数据-取第一个元素和第-10-万个元素的时间相差多少-字节","link":"#_115-数组里面有-10-万个数据-取第一个元素和第-10-万个元素的时间相差多少-字节","children":[]},{"level":3,"title":"116. 打印出 1~10000 以内的对称数","slug":"_116-打印出-1-10000-以内的对称数","link":"#_116-打印出-1-10000-以内的对称数","children":[]},{"level":3,"title":"117. 简述同步和异步的区别","slug":"_117-简述同步和异步的区别","link":"#_117-简述同步和异步的区别","children":[]},{"level":3,"title":"118. 怎么添加、移除、复制、创建、和查找节点","slug":"_118-怎么添加、移除、复制、创建、和查找节点","link":"#_118-怎么添加、移除、复制、创建、和查找节点","children":[]},{"level":3,"title":"119. 实现一个函数 clone 可以对 Javascript 中的五种主要数据类型（Number、string、 Object、Array、Boolean）进行复制","slug":"_119-实现一个函数-clone-可以对-javascript-中的五种主要数据类型-number、string、-object、array、boolean-进行复制","link":"#_119-实现一个函数-clone-可以对-javascript-中的五种主要数据类型-number、string、-object、array、boolean-进行复制","children":[]},{"level":3,"title":"120. 如何消除一个数组里面重复的元素","slug":"_120-如何消除一个数组里面重复的元素","link":"#_120-如何消除一个数组里面重复的元素","children":[]},{"level":3,"title":"121. 写一个返回闭包的函数","slug":"_121-写一个返回闭包的函数","link":"#_121-写一个返回闭包的函数","children":[]},{"level":3,"title":"122. 使用递归完成 1 到 100 的累加","slug":"_122-使用递归完成-1-到-100-的累加","link":"#_122-使用递归完成-1-到-100-的累加","children":[]},{"level":3,"title":"123. Javascript 有哪几种数据类型","slug":"_123-javascript-有哪几种数据类型","link":"#_123-javascript-有哪几种数据类型","children":[]},{"level":3,"title":"124. 如何判断数据类型","slug":"_124-如何判断数据类型","link":"#_124-如何判断数据类型","children":[]},{"level":3,"title":"125. console.log(1+'2')和 console.log(1-'2')的打印结果","slug":"_125-console-log-1-2-和-console-log-1-2-的打印结果","link":"#_125-console-log-1-2-和-console-log-1-2-的打印结果","children":[]},{"level":3,"title":"126. JS 的事件委托是什么，原理是什么","slug":"_126-js-的事件委托是什么-原理是什么","link":"#_126-js-的事件委托是什么-原理是什么","children":[]},{"level":3,"title":"127. 如何改变函数内部的 this 指针的指向","slug":"_127-如何改变函数内部的-this-指针的指向","link":"#_127-如何改变函数内部的-this-指针的指向","children":[]},{"level":3,"title":"128. JS 延迟加载的方式有哪些？","slug":"_128-js-延迟加载的方式有哪些","link":"#_128-js-延迟加载的方式有哪些","children":[]},{"level":3,"title":"129. 说说严格模式的限制","slug":"_129-说说严格模式的限制","link":"#_129-说说严格模式的限制","children":[]},{"level":3,"title":"130. attribute 和 property 的区别是什么？","slug":"_130-attribute-和-property-的区别是什么","link":"#_130-attribute-和-property-的区别是什么","children":[]},{"level":3,"title":"131. ES6 能写 class 么，为什么会出现 class 这种东西?","slug":"_131-es6-能写-class-么-为什么会出现-class-这种东西","link":"#_131-es6-能写-class-么-为什么会出现-class-这种东西","children":[]},{"level":3,"title":"132. 常见兼容性问题","slug":"_132-常见兼容性问题","link":"#_132-常见兼容性问题","children":[]},{"level":3,"title":"133. 函数防抖节流的原理","slug":"_133-函数防抖节流的原理","link":"#_133-函数防抖节流的原理","children":[]},{"level":3,"title":"134. 原始类型有哪几种？null 是对象吗？","slug":"_134-原始类型有哪几种-null-是对象吗","link":"#_134-原始类型有哪几种-null-是对象吗","children":[]},{"level":3,"title":"135. 为什么 console.log(0.2+0.1==0.3) // false","slug":"_135-为什么-console-log-0-2-0-1-0-3-false","link":"#_135-为什么-console-log-0-2-0-1-0-3-false","children":[]},{"level":3,"title":"136. 说一下 JS 中类型转换的规则？","slug":"_136-说一下-js-中类型转换的规则","link":"#_136-说一下-js-中类型转换的规则","children":[]},{"level":3,"title":"137. 深拷贝和浅拷贝的区别？如何实现","slug":"_137-深拷贝和浅拷贝的区别-如何实现","link":"#_137-深拷贝和浅拷贝的区别-如何实现","children":[]},{"level":3,"title":"138. 如何判断 this？箭头函数的 this 是什么","slug":"_138-如何判断-this-箭头函数的-this-是什么","link":"#_138-如何判断-this-箭头函数的-this-是什么","children":[]},{"level":3,"title":"139. call、apply 以及 bind 函数内部实现是怎么样的","slug":"_139-call、apply-以及-bind-函数内部实现是怎么样的","link":"#_139-call、apply-以及-bind-函数内部实现是怎么样的","children":[]},{"level":3,"title":"140. 为什么会出现 setTimeout 倒计时误差？如何减少","slug":"_140-为什么会出现-settimeout-倒计时误差-如何减少","link":"#_140-为什么会出现-settimeout-倒计时误差-如何减少","children":[]},{"level":3,"title":"141. 谈谈你对 JS 执行上下文栈和作用域链的理解","slug":"_141-谈谈你对-js-执行上下文栈和作用域链的理解","link":"#_141-谈谈你对-js-执行上下文栈和作用域链的理解","children":[]},{"level":3,"title":"142. new 的原理是什么？通过 new 的方式创建对象和通过字面量创建有什么区别？","slug":"_142-new-的原理是什么-通过-new-的方式创建对象和通过字面量创建有什么区别","link":"#_142-new-的原理是什么-通过-new-的方式创建对象和通过字面量创建有什么区别","children":[]},{"level":3,"title":"143. prototype 和 __proto__ 区别是什么？","slug":"_143-prototype-和-proto-区别是什么","link":"#_143-prototype-和-proto-区别是什么","children":[]},{"level":3,"title":"144. 使用 ES5 实现一个继承？","slug":"_144-使用-es5-实现一个继承","link":"#_144-使用-es5-实现一个继承","children":[]},{"level":3,"title":"145. 取数组的最大值（ES5、ES6）","slug":"_145-取数组的最大值-es5、es6","link":"#_145-取数组的最大值-es5、es6","children":[]},{"level":3,"title":"146. ES6 新的特性有哪些？","slug":"_146-es6-新的特性有哪些","link":"#_146-es6-新的特性有哪些","children":[]},{"level":3,"title":"147. Promise 有几种状态, Promise 有什么优缺点 ?","slug":"_147-promise-有几种状态-promise-有什么优缺点","link":"#_147-promise-有几种状态-promise-有什么优缺点","children":[]},{"level":3,"title":"148. Promise 构造函数是同步还是异步执行，then 呢 ? Promise 如何实现 then 处理 ?","slug":"_148-promise-构造函数是同步还是异步执行-then-呢-promise-如何实现-then-处理","link":"#_148-promise-构造函数是同步还是异步执行-then-呢-promise-如何实现-then-处理","children":[]},{"level":3,"title":"149. Promise 和 setTimeout 的区别 ?","slug":"_149-promise-和-settimeout-的区别","link":"#_149-promise-和-settimeout-的区别","children":[]},{"level":3,"title":"150. 如何实现 Promise.all ?","slug":"_150-如何实现-promise-all","link":"#_150-如何实现-promise-all","children":[]},{"level":3,"title":"151. 如何实现 Promise.finally ?","slug":"_151-如何实现-promise-finally","link":"#_151-如何实现-promise-finally","children":[]},{"level":3,"title":"152. 如何判断 img 加载完成","slug":"_152-如何判断-img-加载完成","link":"#_152-如何判断-img-加载完成","children":[]},{"level":3,"title":"153. 如何阻止冒泡？","slug":"_153-如何阻止冒泡","link":"#_153-如何阻止冒泡","children":[]},{"level":3,"title":"154. 如何阻止默认事件？","slug":"_154-如何阻止默认事件","link":"#_154-如何阻止默认事件","children":[]},{"level":3,"title":"155. 如何用原生 js 给一个按钮绑定两个 onclick 事件？","slug":"_155-如何用原生-js-给一个按钮绑定两个-onclick-事件","link":"#_155-如何用原生-js-给一个按钮绑定两个-onclick-事件","children":[]},{"level":3,"title":"156. 拖拽会用到哪些事件","slug":"_156-拖拽会用到哪些事件","link":"#_156-拖拽会用到哪些事件","children":[]},{"level":3,"title":"157. document.write 和 innerHTML 的区别","slug":"_157-document-write-和-innerhtml-的区别","link":"#_157-document-write-和-innerhtml-的区别","children":[]},{"level":3,"title":"158. jQuery 的事件委托方法 bind 、live、delegate、one、on 之间有什么区别？","slug":"_158-jquery-的事件委托方法-bind-、live、delegate、one、on-之间有什么区别","link":"#_158-jquery-的事件委托方法-bind-、live、delegate、one、on-之间有什么区别","children":[]},{"level":3,"title":"159. $(document).ready 方法和 window.onload 有什么区别？","slug":"_159-document-ready-方法和-window-onload-有什么区别","link":"#_159-document-ready-方法和-window-onload-有什么区别","children":[]},{"level":3,"title":"160. jquery 中$.get()提交和$.post()提交有区别吗？","slug":"_160-jquery-中-get-提交和-post-提交有区别吗","link":"#_160-jquery-中-get-提交和-post-提交有区别吗","children":[]},{"level":3,"title":"161. await async 如何实现 （阿里）","slug":"_161-await-async-如何实现-阿里","link":"#_161-await-async-如何实现-阿里","children":[]},{"level":3,"title":"162. clientWidth,offsetWidth,scrollWidth 的区别","slug":"_162-clientwidth-offsetwidth-scrollwidth-的区别","link":"#_162-clientwidth-offsetwidth-scrollwidth-的区别","children":[]},{"level":3,"title":"163. 产生一个不重复的随机数组","slug":"_163-产生一个不重复的随机数组","link":"#_163-产生一个不重复的随机数组","children":[]},{"level":3,"title":"164. continue 和 break 的区别","slug":"_164-continue-和-break-的区别","link":"#_164-continue-和-break-的区别","children":[]},{"level":3,"title":"165. 如何在 jquery 上扩展插件，以及内部原理（腾讯）","slug":"_165-如何在-jquery-上扩展插件-以及内部原理-腾讯","link":"#_165-如何在-jquery-上扩展插件-以及内部原理-腾讯","children":[]},{"level":3,"title":"166. async/await 如何捕获错误","slug":"_166-async-await-如何捕获错误","link":"#_166-async-await-如何捕获错误","children":[]},{"level":3,"title":"167. Proxy 对比 Object.defineProperty 的优势","slug":"_167-proxy-对比-object-defineproperty-的优势","link":"#_167-proxy-对比-object-defineproperty-的优势","children":[]},{"level":3,"title":"168. 原型链，可以改变原型链的规则吗?","slug":"_168-原型链-可以改变原型链的规则吗","link":"#_168-原型链-可以改变原型链的规则吗","children":[]},{"level":3,"title":"169. 讲一讲继承的所有方式都有什么？手写一个寄生组合式继承","slug":"_169-讲一讲继承的所有方式都有什么-手写一个寄生组合式继承","link":"#_169-讲一讲继承的所有方式都有什么-手写一个寄生组合式继承","children":[]},{"level":3,"title":"170. JS 基本数据类型有哪些？栈和堆有什么区别，为什么要这样存储。（快手）","slug":"_170-js-基本数据类型有哪些-栈和堆有什么区别-为什么要这样存储。-快手","link":"#_170-js-基本数据类型有哪些-栈和堆有什么区别-为什么要这样存储。-快手","children":[]},{"level":3,"title":"171. setTimeout(() => {}, 0) 什么时候执行","slug":"_171-settimeout-0-什么时候执行","link":"#_171-settimeout-0-什么时候执行","children":[]},{"level":3,"title":"172. js 有函数重载吗（网易）","slug":"_172-js-有函数重载吗-网易","link":"#_172-js-有函数重载吗-网易","children":[]},{"level":3,"title":"173. 给你一个数组，计算每个数出现的次数，如果每个数组返回的数都是独一无二的就返回 true 相反则返回的 flase","slug":"_173-给你一个数组-计算每个数出现的次数-如果每个数组返回的数都是独一无二的就返回-true-相反则返回的-flase","link":"#_173-给你一个数组-计算每个数出现的次数-如果每个数组返回的数都是独一无二的就返回-true-相反则返回的-flase","children":[]},{"level":3,"title":"174. 封装一个能够统计重复的字符的函数，例如 aaabbbdddddfff 转化为 3a3b5d3f","slug":"_174-封装一个能够统计重复的字符的函数-例如-aaabbbdddddfff-转化为-3a3b5d3f","link":"#_174-封装一个能够统计重复的字符的函数-例如-aaabbbdddddfff-转化为-3a3b5d3f","children":[]},{"level":3,"title":"175. 写出代码的执行结果，并解释为什么？","slug":"_175-写出代码的执行结果-并解释为什么","link":"#_175-写出代码的执行结果-并解释为什么","children":[]},{"level":3,"title":"176. 写出代码的执行结果，并解释为什么？","slug":"_176-写出代码的执行结果-并解释为什么","link":"#_176-写出代码的执行结果-并解释为什么","children":[]},{"level":3,"title":"177. 写出下面程序的打印顺序，并简要说明原因","slug":"_177-写出下面程序的打印顺序-并简要说明原因","link":"#_177-写出下面程序的打印顺序-并简要说明原因","children":[]},{"level":3,"title":"178. javascript 中什么是伪数组？如何将伪数组转换为标准数组","slug":"_178-javascript-中什么是伪数组-如何将伪数组转换为标准数组","link":"#_178-javascript-中什么是伪数组-如何将伪数组转换为标准数组","children":[]},{"level":3,"title":"179. array 和 object 的区别","slug":"_179-array-和-object-的区别","link":"#_179-array-和-object-的区别","children":[]},{"level":3,"title":"180. jquery 事件委托","slug":"_180-jquery-事件委托","link":"#_180-jquery-事件委托","children":[]},{"level":3,"title":"181. JS 基本数据类型","slug":"_181-js-基本数据类型","link":"#_181-js-基本数据类型","children":[]},{"level":3,"title":"182. 请实现一个模块 math，支持链式调用math.add(2,4).minus(3).times(2);","slug":"_182-请实现一个模块-math-支持链式调用math-add-2-4-minus-3-times-2","link":"#_182-请实现一个模块-math-支持链式调用math-add-2-4-minus-3-times-2","children":[]},{"level":3,"title":"183. 请简述 ES6 代码转成 ES5 代码的实现思路。","slug":"_183-请简述-es6-代码转成-es5-代码的实现思路。","link":"#_183-请简述-es6-代码转成-es5-代码的实现思路。","children":[]},{"level":3,"title":"184. 下列代码的执行结果","slug":"_184-下列代码的执行结果","link":"#_184-下列代码的执行结果","children":[]},{"level":3,"title":"185. JS 有哪些内置对象？","slug":"_185-js-有哪些内置对象","link":"#_185-js-有哪些内置对象","children":[]},{"level":3,"title":"186. DOM 怎样添加、移除、移动、复制、创建和查找节点","slug":"_186-dom-怎样添加、移除、移动、复制、创建和查找节点","link":"#_186-dom-怎样添加、移除、移动、复制、创建和查找节点","children":[]},{"level":3,"title":"187. eval 是做什么的？","slug":"_187-eval-是做什么的","link":"#_187-eval-是做什么的","children":[]},{"level":3,"title":"188. null 和 undefined 的区别？","slug":"_188-null-和-undefined-的区别","link":"#_188-null-和-undefined-的区别","children":[]},{"level":3,"title":"189. new 操作符具体干了什么呢？","slug":"_189-new-操作符具体干了什么呢","link":"#_189-new-操作符具体干了什么呢","children":[]},{"level":3,"title":"190. 去除字符串中的空格","slug":"_190-去除字符串中的空格","link":"#_190-去除字符串中的空格","children":[]},{"level":3,"title":"191. 常见的内存泄露，以及解决方案","slug":"_191-常见的内存泄露-以及解决方案","link":"#_191-常见的内存泄露-以及解决方案","children":[]},{"level":3,"title":"192. 箭头函数和普通函数里面的 this 有什么区别","slug":"_192-箭头函数和普通函数里面的-this-有什么区别","link":"#_192-箭头函数和普通函数里面的-this-有什么区别","children":[]},{"level":3,"title":"193. 设计⼀个⽅法(isPalindrom)以判断是否回⽂(颠倒后的字符串和原来的字符串⼀样为回⽂)","slug":"_193-设计一个方法-ispalindrom-以判断是否回文-颠倒后的字符串和原来的字符串一样为回文","link":"#_193-设计一个方法-ispalindrom-以判断是否回文-颠倒后的字符串和原来的字符串一样为回文","children":[]},{"level":3,"title":"194. 设计⼀个⽅法(findMaxDuplicateChar)以统计字符串中出现最多次数的字符","slug":"_194-设计一个方法-findmaxduplicatechar-以统计字符串中出现最多次数的字符","link":"#_194-设计一个方法-findmaxduplicatechar-以统计字符串中出现最多次数的字符","children":[]},{"level":3,"title":"195. 设计⼀段代码，使得通过点击按钮可以在 span 中显示⽂本框中输⼊的值","slug":"_195-设计一段代码-使得通过点击按钮可以在-span-中显示文本框中输入的值","link":"#_195-设计一段代码-使得通过点击按钮可以在-span-中显示文本框中输入的值","children":[]},{"level":3,"title":"196. map 和 forEach 的区别？","slug":"_196-map-和-foreach-的区别","link":"#_196-map-和-foreach-的区别","children":[]},{"level":3,"title":"197. Array 的常用方法","slug":"_197-array-的常用方法","link":"#_197-array-的常用方法","children":[]},{"level":3,"title":"198. 数组去重的多种实现方式","slug":"_198-数组去重的多种实现方式","link":"#_198-数组去重的多种实现方式","children":[]},{"level":3,"title":"199. 什么是预解析（预编译）","slug":"_199-什么是预解析-预编译","link":"#_199-什么是预解析-预编译","children":[]},{"level":3,"title":"200. 原始值类型和引用值类型的区别是什么？","slug":"_200-原始值类型和引用值类型的区别是什么","link":"#_200-原始值类型和引用值类型的区别是什么","children":[]},{"level":3,"title":"201. 冒泡排序的思路，不用 sort","slug":"_201-冒泡排序的思路-不用-sort","link":"#_201-冒泡排序的思路-不用-sort","children":[]},{"level":3,"title":"202. symbol 用途","slug":"_202-symbol-用途","link":"#_202-symbol-用途","children":[]},{"level":3,"title":"203. 什么是函数式编程，应用场景是什么","slug":"_203-什么是函数式编程-应用场景是什么","link":"#_203-什么是函数式编程-应用场景是什么","children":[]},{"level":3,"title":"204. 事件以及事件相关的兼容性问题","slug":"_204-事件以及事件相关的兼容性问题","link":"#_204-事件以及事件相关的兼容性问题","children":[]},{"level":3,"title":"205. JS 小数不精准，如何计算","slug":"_205-js-小数不精准-如何计算","link":"#_205-js-小数不精准-如何计算","children":[]},{"level":3,"title":"206. 写一个 mySetInterVal(fn, a, b)，每次间隔 a,a+b,a+2b 的时间，然后写一个 myClear，停止上面的 mySetInterVal","slug":"_206-写一个-mysetinterval-fn-a-b-每次间隔-a-a-b-a-2b-的时间-然后写一个-myclear-停止上面的-mysetinterval","link":"#_206-写一个-mysetinterval-fn-a-b-每次间隔-a-a-b-a-2b-的时间-然后写一个-myclear-停止上面的-mysetinterval","children":[]},{"level":3,"title":"207. 合并二维有序数组成一维有序数组，归并排序的思路","slug":"_207-合并二维有序数组成一维有序数组-归并排序的思路","link":"#_207-合并二维有序数组成一维有序数组-归并排序的思路","children":[]},{"level":3,"title":"208. 给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。","slug":"_208-给定一个字符串-请你找出其中不含有重复字符的最长子串的长度。","link":"#_208-给定一个字符串-请你找出其中不含有重复字符的最长子串的长度。","children":[]},{"level":3,"title":"209. 有一堆整数，请把他们分成三份，确保每一份和尽量相等（11，42，23，4，5，6 4 5 6 11 23 42 56 78 90）(滴滴 2020)","slug":"_209-有一堆整数-请把他们分成三份-确保每一份和尽量相等-11-42-23-4-5-6-4-5-6-11-23-42-56-78-90-滴滴-2020","link":"#_209-有一堆整数-请把他们分成三份-确保每一份和尽量相等-11-42-23-4-5-6-4-5-6-11-23-42-56-78-90-滴滴-2020","children":[]},{"level":3,"title":"210. 手写发布订阅（头条 2020）","slug":"_210-手写发布订阅-头条-2020","link":"#_210-手写发布订阅-头条-2020","children":[]},{"level":3,"title":"211. 手写用 ES6proxy 如何实现 arr[-1] 的访问（滴滴 2020）","slug":"_211-手写用-es6proxy-如何实现-arr-1-的访问-滴滴-2020","link":"#_211-手写用-es6proxy-如何实现-arr-1-的访问-滴滴-2020","children":[]},{"level":3,"title":"212. 下列代码执行结果","slug":"_212-下列代码执行结果","link":"#_212-下列代码执行结果","children":[]},{"level":3,"title":"213. Number() 的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办","slug":"_213-number-的存储空间是多大-如果后台发送了一个超过最大自己的数字怎么办","link":"#_213-number-的存储空间是多大-如果后台发送了一个超过最大自己的数字怎么办","children":[]},{"level":3,"title":"214. 事件是如何实现的？(字节 2020)","slug":"_214-事件是如何实现的-字节-2020","link":"#_214-事件是如何实现的-字节-2020","children":[]},{"level":3,"title":"215. 下列代码执行结果","slug":"_215-下列代码执行结果","link":"#_215-下列代码执行结果","children":[]},{"level":3,"title":"216. 判断数组的方法，请分别介绍它们之间的区别和优劣","slug":"_216-判断数组的方法-请分别介绍它们之间的区别和优劣","link":"#_216-判断数组的方法-请分别介绍它们之间的区别和优劣","children":[]},{"level":3,"title":"217. JavaScript 中的数组和函数在内存中是如何存储的？","slug":"_217-javascript-中的数组和函数在内存中是如何存储的","link":"#_217-javascript-中的数组和函数在内存中是如何存储的","children":[]},{"level":3,"title":"218. JavaScript 是如何运行的？解释型语言和编译型语言的差异是什么？","slug":"_218-javascript-是如何运行的-解释型语言和编译型语言的差异是什么","link":"#_218-javascript-是如何运行的-解释型语言和编译型语言的差异是什么","children":[]},{"level":3,"title":"219. 列举你所了解的编程范式？","slug":"_219-列举你所了解的编程范式","link":"#_219-列举你所了解的编程范式","children":[]},{"level":3,"title":"220. 什么是面向切面（AOP）的编程？","slug":"_220-什么是面向切面-aop-的编程","link":"#_220-什么是面向切面-aop-的编程","children":[]},{"level":3,"title":"221. JavaScript 中的 const 数组可以进行 push 操作吗？为什么？","slug":"_221-javascript-中的-const-数组可以进行-push-操作吗-为什么","link":"#_221-javascript-中的-const-数组可以进行-push-操作吗-为什么","children":[]},{"level":3,"title":"222. JavaScript 中对象的属性描述符有哪些？分别有什么作用？","slug":"_222-javascript-中对象的属性描述符有哪些-分别有什么作用","link":"#_222-javascript-中对象的属性描述符有哪些-分别有什么作用","children":[]},{"level":3,"title":"223. JavaScript 中 console 有哪些 api ?","slug":"_223-javascript-中-console-有哪些-api","link":"#_223-javascript-中-console-有哪些-api","children":[]},{"level":3,"title":"224. 简单对比一下 Callback、Promise、Generator、Async 几个异步 API 的优劣？","slug":"_224-简单对比一下-callback、promise、generator、async-几个异步-api-的优劣","link":"#_224-简单对比一下-callback、promise、generator、async-几个异步-api-的优劣","children":[]},{"level":3,"title":"225. Object.defineProperty 有哪几个参数？各自都有什么作用","slug":"_225-object-defineproperty-有哪几个参数-各自都有什么作用","link":"#_225-object-defineproperty-有哪几个参数-各自都有什么作用","children":[]},{"level":3,"title":"226. Object.defineProperty 和 ES6 的 Proxy 有什么区别？","slug":"_226-object-defineproperty-和-es6-的-proxy-有什么区别","link":"#_226-object-defineproperty-和-es6-的-proxy-有什么区别","children":[]},{"level":3,"title":"227. intanceof 操作符的实现原理及实现","slug":"_227-intanceof-操作符的实现原理及实现","link":"#_227-intanceof-操作符的实现原理及实现","children":[]},{"level":3,"title":"228. 强制类型转换规则？","slug":"_228-强制类型转换规则","link":"#_228-强制类型转换规则","children":[]},{"level":3,"title":"229. Object.is( ) 与比较操作符 “===”、“==” 的区别","slug":"_229-object-is-与比较操作符-、-的区别","link":"#_229-object-is-与比较操作符-、-的区别","children":[]},{"level":3,"title":"230. + 操作符什么时候用于字符串的拼接？","slug":"_230-操作符什么时候用于字符串的拼接","link":"#_230-操作符什么时候用于字符串的拼接","children":[]},{"level":3,"title":"231. object.assign 和扩展运算法是深拷贝还是浅拷贝","slug":"_231-object-assign-和扩展运算法是深拷贝还是浅拷贝","link":"#_231-object-assign-和扩展运算法是深拷贝还是浅拷贝","children":[]},{"level":3,"title":"232. const 对象的属性可以修改吗","slug":"_232-const-对象的属性可以修改吗","link":"#_232-const-对象的属性可以修改吗","children":[]},{"level":3,"title":"233. 如果 new 一个箭头函数的会怎么样","slug":"_233-如果-new-一个箭头函数的会怎么样","link":"#_233-如果-new-一个箭头函数的会怎么样","children":[]},{"level":3,"title":"234. 扩展运算符的作用及使用场景","slug":"_234-扩展运算符的作用及使用场景","link":"#_234-扩展运算符的作用及使用场景","children":[]},{"level":3,"title":"235. Proxy 可以实现什么功能？","slug":"_235-proxy-可以实现什么功能","link":"#_235-proxy-可以实现什么功能","children":[]},{"level":3,"title":"236. 对象与数组的解构的理解","slug":"_236-对象与数组的解构的理解","link":"#_236-对象与数组的解构的理解","children":[]},{"level":3,"title":"237. 如何提取高度嵌套的对象里的指定属性？","slug":"_237-如何提取高度嵌套的对象里的指定属性","link":"#_237-如何提取高度嵌套的对象里的指定属性","children":[]},{"level":3,"title":"238. Unicode、UTF-8、UTF-16、UTF-32 的区别？","slug":"_238-unicode、utf-8、utf-16、utf-32-的区别","link":"#_238-unicode、utf-8、utf-16、utf-32-的区别","children":[]},{"level":3,"title":"239. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?","slug":"_239-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组","link":"#_239-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组","children":[]},{"level":3,"title":"240. escape、encodeURI、encodeURIComponent 的区别","slug":"_240-escape、encodeuri、encodeuricomponent-的区别","link":"#_240-escape、encodeuri、encodeuricomponent-的区别","children":[]},{"level":3,"title":"241. use strict 是什么意思 ? 使用它区别是什么？","slug":"_241-use-strict-是什么意思-使用它区别是什么","link":"#_241-use-strict-是什么意思-使用它区别是什么","children":[]},{"level":3,"title":"242. for...in 和 for...of 的区别","slug":"_242-for-in-和-for-of-的区别","link":"#_242-for-in-和-for-of-的区别","children":[]},{"level":3,"title":"243. ajax、axios、fetch 的区别","slug":"_243-ajax、axios、fetch-的区别","link":"#_243-ajax、axios、fetch-的区别","children":[]},{"level":3,"title":"244. 下面代码的输出是什么？（ D ）","slug":"_244-下面代码的输出是什么-d","link":"#_244-下面代码的输出是什么-d","children":[]},{"level":3,"title":"245. 下面代码的输出是什么？（ C ）","slug":"_245-下面代码的输出是什么-c","link":"#_245-下面代码的输出是什么-c","children":[]},{"level":3,"title":"246. 下面代码的输出是什么？（ B ）","slug":"_246-下面代码的输出是什么-b","link":"#_246-下面代码的输出是什么-b","children":[]},{"level":3,"title":"247. 下面代码的输出是什么？（ A ）","slug":"_247-下面代码的输出是什么-a","link":"#_247-下面代码的输出是什么-a","children":[]},{"level":3,"title":"248. 哪个选项是不正确的？（ A ）","slug":"_248-哪个选项是不正确的-a","link":"#_248-哪个选项是不正确的-a","children":[]},{"level":3,"title":"249. 下面代码的输出是什么？（ A ）","slug":"_249-下面代码的输出是什么-a","link":"#_249-下面代码的输出是什么-a","children":[]},{"level":3,"title":"250. 下面代码的输出是什么？（ C ）","slug":"_250-下面代码的输出是什么-c","link":"#_250-下面代码的输出是什么-c","children":[]},{"level":3,"title":"251. 下面代码的输出是什么？（ D ）","slug":"_251-下面代码的输出是什么-d","link":"#_251-下面代码的输出是什么-d","children":[]},{"level":3,"title":"252. 下面代码的输出是什么？（ A ）","slug":"_252-下面代码的输出是什么-a","link":"#_252-下面代码的输出是什么-a","children":[]},{"level":3,"title":"253. 当我们执行以下代码时会发生什么？（ A ）","slug":"_253-当我们执行以下代码时会发生什么-a","link":"#_253-当我们执行以下代码时会发生什么-a","children":[]},{"level":3,"title":"254. 下面代码的输出是什么？（ A ）","slug":"_254-下面代码的输出是什么-a","link":"#_254-下面代码的输出是什么-a","children":[]},{"level":3,"title":"255. 下面代码的输出是什么？（ A ）","slug":"_255-下面代码的输出是什么-a","link":"#_255-下面代码的输出是什么-a","children":[]},{"level":3,"title":"256. 事件传播的三个阶段是什么？（ D ）","slug":"_256-事件传播的三个阶段是什么-d","link":"#_256-事件传播的三个阶段是什么-d","children":[]},{"level":3,"title":"257. 下面代码的输出是什么？（ C ）","slug":"_257-下面代码的输出是什么-c","link":"#_257-下面代码的输出是什么-c","children":[]},{"level":3,"title":"258. 下面代码的输出是什么？（ C ）","slug":"_258-下面代码的输出是什么-c","link":"#_258-下面代码的输出是什么-c","children":[]},{"level":3,"title":"259. 下面代码的输出是什么？（ B ）","slug":"_259-下面代码的输出是什么-b","link":"#_259-下面代码的输出是什么-b","children":[]},{"level":3,"title":"260. 下面代码的输出是什么？（ C ）","slug":"_260-下面代码的输出是什么-c","link":"#_260-下面代码的输出是什么-c","children":[]},{"level":3,"title":"261. 下面代码的输出是什么？（ C ）","slug":"_261-下面代码的输出是什么-c","link":"#_261-下面代码的输出是什么-c","children":[]},{"level":3,"title":"262. 下面代码的输出是什么？（ C ）","slug":"_262-下面代码的输出是什么-c","link":"#_262-下面代码的输出是什么-c","children":[]},{"level":3,"title":"263. 下面代码的输出是什么？（ A ）","slug":"_263-下面代码的输出是什么-a","link":"#_263-下面代码的输出是什么-a","children":[]},{"level":3,"title":"264. cool_secret 可以访问多长时间？（ B ）","slug":"_264-cool-secret-可以访问多长时间-b","link":"#_264-cool-secret-可以访问多长时间-b","children":[]},{"level":3,"title":"265. 下面代码的输出是什么？（ B ）","slug":"_265-下面代码的输出是什么-b","link":"#_265-下面代码的输出是什么-b","children":[]},{"level":3,"title":"266. 下面代码的输出是什么？（ C ）","slug":"_266-下面代码的输出是什么-c","link":"#_266-下面代码的输出是什么-c","children":[]},{"level":3,"title":"267. 下面代码的输出是什么？（ C ）","slug":"_267-下面代码的输出是什么-c","link":"#_267-下面代码的输出是什么-c","children":[]},{"level":3,"title":"268. 下面代码的输出是什么？（ C ）","slug":"_268-下面代码的输出是什么-c","link":"#_268-下面代码的输出是什么-c","children":[]},{"level":3,"title":"269. 下面代码的输出是什么？（ A ）","slug":"_269-下面代码的输出是什么-a","link":"#_269-下面代码的输出是什么-a","children":[]},{"level":3,"title":"270. 下面代码的输出是什么？（ B ）","slug":"_270-下面代码的输出是什么-b","link":"#_270-下面代码的输出是什么-b","children":[]},{"level":3,"title":"271. 下面代码的输出是什么？（ B ）","slug":"_271-下面代码的输出是什么-b","link":"#_271-下面代码的输出是什么-b","children":[]},{"level":3,"title":"272. 单击按钮时 event.target 是什么？（ C ）","slug":"_272-单击按钮时-event-target-是什么-c","link":"#_272-单击按钮时-event-target-是什么-c","children":[]},{"level":3,"title":"273. 单击下面的 html 片段打印的内容是什么？（ A ）","slug":"_273-单击下面的-html-片段打印的内容是什么-a","link":"#_273-单击下面的-html-片段打印的内容是什么-a","children":[]},{"level":3,"title":"274. 下面代码的输出是什么？（ D ）","slug":"_274-下面代码的输出是什么-d","link":"#_274-下面代码的输出是什么-d","children":[]},{"level":3,"title":"275. 下面代码的输出是什么？（ B ）","slug":"_275-下面代码的输出是什么-b","link":"#_275-下面代码的输出是什么-b","children":[]},{"level":3,"title":"276. 下面这些值哪些是假值？（ A ）","slug":"_276-下面这些值哪些是假值-a","link":"#_276-下面这些值哪些是假值-a","children":[]},{"level":3,"title":"278. 下面代码的输出是什么？（ B ）","slug":"_278-下面代码的输出是什么-b","link":"#_278-下面代码的输出是什么-b","children":[]},{"level":3,"title":"279. 下面代码的输出是什么？（ C ）","slug":"_279-下面代码的输出是什么-c","link":"#_279-下面代码的输出是什么-c","children":[]},{"level":3,"title":"280. 下面代码的输出是什么？（ A ）","slug":"_280-下面代码的输出是什么-a","link":"#_280-下面代码的输出是什么-a","children":[]},{"level":3,"title":"281. JavaScript 中的所有内容都是…（ A ）","slug":"_281-javascript-中的所有内容都是-a","link":"#_281-javascript-中的所有内容都是-a","children":[]},{"level":3,"title":"282. 下面代码的输出是什么?","slug":"_282-下面代码的输出是什么","link":"#_282-下面代码的输出是什么","children":[]},{"level":3,"title":"283. 下面代码的输出是什么？（ B ）","slug":"_283-下面代码的输出是什么-b","link":"#_283-下面代码的输出是什么-b","children":[]},{"level":3,"title":"284. setInterval 方法的返回值什么？（ A ）","slug":"_284-setinterval-方法的返回值什么-a","link":"#_284-setinterval-方法的返回值什么-a","children":[]},{"level":3,"title":"285. 下面代码的返回值是什么？（ A ）","slug":"_285-下面代码的返回值是什么-a","link":"#_285-下面代码的返回值是什么-a","children":[]},{"level":3,"title":"286. document.write 和 innerHTML 有哪些区别？","slug":"_286-document-write-和-innerhtml-有哪些区别","link":"#_286-document-write-和-innerhtml-有哪些区别","children":[]},{"level":3,"title":"287. 假设有两个变量 a 和 b，他们的值都是数字，如何在不借用第三个变量的情况下，将两个变量的值对调？","slug":"_287-假设有两个变量-a-和-b-他们的值都是数字-如何在不借用第三个变量的情况下-将两个变量的值对调","link":"#_287-假设有两个变量-a-和-b-他们的值都是数字-如何在不借用第三个变量的情况下-将两个变量的值对调","children":[]},{"level":3,"title":"288. 前端为什么提倡模块化开发？","slug":"_288-前端为什么提倡模块化开发","link":"#_288-前端为什么提倡模块化开发","children":[]},{"level":3,"title":"289. 请解释 JSONP 的原理，并用代码描述其过程。","slug":"_289-请解释-jsonp-的原理-并用代码描述其过程。","link":"#_289-请解释-jsonp-的原理-并用代码描述其过程。","children":[]},{"level":3,"title":"290. 列举几种 JavaScript 中数据类型的强制转换和隐式转换。","slug":"_290-列举几种-javascript-中数据类型的强制转换和隐式转换。","link":"#_290-列举几种-javascript-中数据类型的强制转换和隐式转换。","children":[]},{"level":3,"title":"291. 分析以下代码的执行结果并解释为什么。","slug":"_291-分析以下代码的执行结果并解释为什么。","link":"#_291-分析以下代码的执行结果并解释为什么。","children":[]},{"level":3,"title":"292. 分析以下代码的执行结果并解释为什么。","slug":"_292-分析以下代码的执行结果并解释为什么。","link":"#_292-分析以下代码的执行结果并解释为什么。","children":[]},{"level":3,"title":"293. 下面的代码打印什么内容？为什么？","slug":"_293-下面的代码打印什么内容-为什么","link":"#_293-下面的代码打印什么内容-为什么","children":[]},{"level":3,"title":"294. 下面代码中，a 在什么情况下会执行输出语句打印 1 ？","slug":"_294-下面代码中-a-在什么情况下会执行输出语句打印-1","link":"#_294-下面代码中-a-在什么情况下会执行输出语句打印-1","children":[]},{"level":3,"title":"295. 介绍前端模块化的发展。","slug":"_295-介绍前端模块化的发展。","link":"#_295-介绍前端模块化的发展。","children":[]},{"level":3,"title":"296. 请指出 document.onload 和 document.ready 两个事件的区别","slug":"_296-请指出-document-onload-和-document-ready-两个事件的区别","link":"#_296-请指出-document-onload-和-document-ready-两个事件的区别","children":[]},{"level":3,"title":"297. 表单元素的readonly 和 disabled 两个属性有什么区别？","slug":"_297-表单元素的readonly-和-disabled-两个属性有什么区别","link":"#_297-表单元素的readonly-和-disabled-两个属性有什么区别","children":[]},{"level":3,"title":"298. 列举几种你知道的数组排序的方法。","slug":"_298-列举几种你知道的数组排序的方法。","link":"#_298-列举几种你知道的数组排序的方法。","children":[]},{"level":3,"title":"299. 区分什么是“客户区坐标”、“页面坐标”、“屏幕坐标”？","slug":"_299-区分什么是-客户区坐标-、-页面坐标-、-屏幕坐标","link":"#_299-区分什么是-客户区坐标-、-页面坐标-、-屏幕坐标","children":[]},{"level":3,"title":"300. 如何编写高性能的 JavaScript？","slug":"_300-如何编写高性能的-javascript","link":"#_300-如何编写高性能的-javascript","children":[]},{"level":3,"title":"301. 下面的代码输出什么？","slug":"_301-下面的代码输出什么","link":"#_301-下面的代码输出什么","children":[]}],"git":{"createdTime":1713345509000,"updatedTime":1713838176000,"contributors":[{"name":"lwj","email":"916215061@qq.com","commits":2}]},"filePathRelative":"blogs/interview/javascript面试题.md","readingTime":{"minutes":27.08,"words":8125}}`);export{r as comp,d as data};
