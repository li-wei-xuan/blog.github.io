import{_ as n,o as s,c as a,a as t}from"./app-EaupiRXX.js";const p={},o=t(`<h2 id="赋值、浅拷贝、深拷贝" tabindex="-1"><a class="header-anchor" href="#赋值、浅拷贝、深拷贝"><span>赋值、浅拷贝、深拷贝</span></a></h2><table><thead><tr><th>操作</th><th>是否指向同一个堆内存地址</th><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>赋值</td><td>是</td><td>改变会使原数据改变</td><td>改变会使原数据改变</td></tr><tr><td>浅拷贝</td><td>否</td><td>改变不会使原数据改变</td><td>改变会使原数据改变</td></tr><tr><td>深拷贝</td><td>否</td><td>改变不会使原数据改变</td><td>改变不会使原数据改变</td></tr></tbody></table><h3 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值"><span>赋值</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>赋值：就是对原对象的栈内存地址进行复制
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token literal-property property">friends</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> obj1 <span class="token operator">=</span> obj

  obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span>
  obj1<span class="token punctuation">.</span>friends<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;里斯&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj.name&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// obj.name 张三</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1.name&#39;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// obj1.name 张三</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj.friends&#39;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// obj.friends [&#39;里斯&#39;, &#39;wangwu&#39;]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1.friends&#39;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// obj1.friends [&#39;里斯&#39;, &#39;wangwu&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>浅拷贝 ：只复制指向某个对象的指针，而不复制对象本身，相当于是新建了一个对象，
        该对象复制了原对象的指针，新旧对象还是共用一个内存块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="浅拷贝实现方法" tabindex="-1"><a class="header-anchor" href="#浅拷贝实现方法"><span>浅拷贝实现方法</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 手写浅拷贝</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token literal-property property">friends</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">shallowCopy</span> <span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> src <span class="token punctuation">)</span><span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           newObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> newObj
  <span class="token punctuation">}</span> <span class="token comment">// let obj1 = obj</span>
  obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span>
  obj1<span class="token punctuation">.</span>friends<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;里斯&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj.name&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// obj.name 张三</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1.name&#39;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// obj1.name 张三</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj.friends&#39;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// obj.friends [&#39;里斯&#39;, &#39;wangwu&#39;]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1.friends&#39;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// obj1.friends [&#39;里斯&#39;, &#39;wangwu&#39;]</span>

<span class="token comment">// 对象的浅拷贝</span>
  <span class="token comment">// ES6 Object.assign</span>
  <span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span>
  obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;jack&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1&#39;</span><span class="token punctuation">,</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 张三</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj2&#39;</span><span class="token punctuation">,</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// jack</span>

  <span class="token comment">// ES6 扩展运算符(...)</span>
  <span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">}</span>
  obj3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;kobe&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj1&#39;</span><span class="token punctuation">,</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 张三</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj3&#39;</span><span class="token punctuation">,</span>obj3<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// kobe</span>

<span class="token comment">// 数组的浅拷贝</span>
  <span class="token comment">// Array.prototype.slice()</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">hobby</span><span class="token operator">:</span><span class="token string">&#39;tennise&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hobby<span class="token operator">=</span><span class="token string">&#39;rose&#39;</span>
  arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&#39;rose&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hobby<span class="token punctuation">)</span> <span class="token comment">// rose</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// jack</span>

  <span class="token comment">// Array.prototype.concat()</span>
  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hobby<span class="token operator">=</span><span class="token string">&#39;basketball&#39;</span>
  arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&#39;rose&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hobby<span class="token punctuation">)</span> <span class="token comment">// basketball</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// jack</span>

  <span class="token comment">// ES6 扩展运算符(...)</span>
  <span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span>
  arr3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hobby<span class="token operator">=</span><span class="token string">&#39;ball&#39;</span>
  arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&#39;kobe&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hobby<span class="token punctuation">)</span> <span class="token comment">// ball</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// jack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>深拷贝：是新建一个一模一样的对象，该对象与原对象不共享内存，修改新对象也不会影响原对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="深拷贝实现方法" tabindex="-1"><a class="header-anchor" href="#深拷贝实现方法"><span>深拷贝实现方法</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// JSON.parse(JSON.stringify())</span>
  <span class="token comment">// 当对象里面有函数的话，深拷贝后，函数会消失</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token string">&#39;tennise&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">&#39;rose&#39;</span>
    arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;rose&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hobby<span class="token punctuation">)</span> <span class="token comment">//tennise</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//jack</span>

<span class="token comment">// 递归</span>
    <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> objClone <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//判断obj子元素是否为对象，如果是，递归复制</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">//如果不是，简单复制</span>
                        objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> objClone<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        b <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// [2, 2, 3, 4]</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","qiankaobeiheshenkaobei.html.vue"]]),r=JSON.parse('{"path":"/blogs/interview/qiankaobeiheshenkaobei.html","title":"浅拷贝和深拷贝","lang":"zh-CN","frontmatter":{"title":"浅拷贝和深拷贝","date":"2022-12-26T00:00:00.000Z","tags":["interview","JavaScript"],"categories":["interview"]},"headers":[{"level":2,"title":"赋值、浅拷贝、深拷贝","slug":"赋值、浅拷贝、深拷贝","link":"#赋值、浅拷贝、深拷贝","children":[{"level":3,"title":"赋值","slug":"赋值","link":"#赋值","children":[]},{"level":3,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[]},{"level":3,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]}]}],"git":{"createdTime":1680588280000,"updatedTime":1680588280000,"contributors":[{"name":"liweijiang","email":"916215061@qq.com","commits":1}]},"filePathRelative":"blogs/interview/浅拷贝和深拷贝.md","readingTime":{"minutes":2.26,"words":677}}');export{k as comp,r as data};
