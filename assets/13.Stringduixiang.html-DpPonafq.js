import{_ as n,o as s,c as a,a as t}from"./app-EaupiRXX.js";const e={},p=t(`<h2 id="string-对象属性" tabindex="-1"><a class="header-anchor" href="#string-对象属性"><span>String 对象属性</span></a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>对创建该对象的函数的引用</td></tr><tr><td>length</td><td>字符串的长度</td></tr><tr><td>prototype</td><td>允许您向对象添加属性和方法</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// constructor 属性返回对 String 对象属性创建的函数。</span>
  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// ƒ String() { [native code] }}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// ƒ String() { [native code] }}</span>

  <span class="token comment">// length 属性返回字符串的长度(字符数)。</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 11</span>

  <span class="token comment">// 适用 prototype 属性给对象添加属性:</span>
  <span class="token keyword">function</span> <span class="token function">employee</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> jobtitle<span class="token punctuation">,</span> born</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
      <span class="token keyword">this</span><span class="token punctuation">.</span>jobtitle <span class="token operator">=</span> jobtitle
      <span class="token keyword">this</span><span class="token punctuation">.</span>born <span class="token operator">=</span> born
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> fred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">employee</span><span class="token punctuation">(</span><span class="token string">&quot;Fred Flintstone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Caveman&quot;</span><span class="token punctuation">,</span> <span class="token number">1970</span><span class="token punctuation">)</span>
  employee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token keyword">null</span>
  fred<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token number">20000</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fred<span class="token punctuation">)</span> <span class="token comment">// employee {name: &#39;Fred Flintstone&#39;, jobtitle: &#39;Caveman&#39;, born: 1970, salary: 20000}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fred<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token comment">// 20000</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="number-对象方法" tabindex="-1"><a class="header-anchor" href="#number-对象方法"><span>Number 对象方法</span></a></h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回在指定位置的字符。</td></tr><tr><td>charCodeAt()</td><td>返回在指定的位置的字符的 Unicode 编码。</td></tr><tr><td>concat()</td><td>连接两个或更多字符串，并返回新的字符串。</td></tr><tr><td>endsWith()</td><td>判断当前字符串是否是以指定的子字符串结尾的（区分大小写）。</td></tr><tr><td>fromCharCode()</td><td>将 Unicode 编码转为字符。</td></tr><tr><td>indexOf()</td><td>返回某个指定的字符串值在字符串中首次出现的位置。</td></tr><tr><td>includes()</td><td>查找字符串中是否包含指定的子字符串。</td></tr><tr><td>lastIndexOf()</td><td>从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。</td></tr><tr><td>match()</td><td>查找找到一个或多个正则表达式的匹配。</td></tr><tr><td>repeat()</td><td>复制字符串指定次数，并将它们连接在一起返回。</td></tr><tr><td>replace()</td><td>在字符串中查找匹配的子串，并替换与正则表达式匹配的子串。</td></tr><tr><td>replaceAll()</td><td>在字符串中查找匹配的子串，并替换与正则表达式匹配的所有子串。</td></tr><tr><td>search()</td><td>查找与正则表达式相匹配的值。</td></tr><tr><td>slice()</td><td>提取字符串的片断，并在新的字符串中返回被提取的部分。</td></tr><tr><td>split()</td><td>把字符串分割为字符串数组。</td></tr><tr><td>startsWith()</td><td>查看字符串是否以指定的子字符串开头。</td></tr><tr><td>substr()</td><td>从起始索引号提取字符串中指定数目的字符。</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr><tr><td>toLowerCase()</td><td>把字符串转换为小写。</td></tr><tr><td>toUpperCase()</td><td>把字符串转换为大写。</td></tr><tr><td>trim()</td><td>去除字符串两边的空白。</td></tr><tr><td>toLocaleLowerCase()</td><td>根据本地主机的语言环境把字符串转换为小写。</td></tr><tr><td>toLocaleUpperCase()</td><td>根据本地主机的语言环境把字符串转换为大写。</td></tr><tr><td>valueOf()</td><td>返回某个字符串对象的原始值。</td></tr><tr><td>toString()</td><td>返回一个字符串。</td></tr></tbody></table><h3 id="charat" tabindex="-1"><a class="header-anchor" href="#charat"><span>charAt()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回指定位置的字符</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// o</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="charcodeat" tabindex="-1"><a class="header-anchor" href="#charcodeat"><span>charCodeAt()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回字符串第一个字符的 Unicode 编码(H 的 Unicode 值):</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span>concat()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用于连接两个或多个字符串</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    <span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>string<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello world zhangsan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="endswith" tabindex="-1"><a class="header-anchor" href="#endswith"><span>endsWith()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 判断字符串是否以指定的子字符串结尾（区分大小写）:</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;ld&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fromcharcode" tabindex="-1"><a class="header-anchor" href="#fromcharcode"><span>fromCharCode()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 将 Unicode 编码转为一个字符:</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="indexof" tabindex="-1"><a class="header-anchor" href="#indexof"><span>indexOf()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回某个指定的字符串值在字符串中首次出现的位置。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="includes" tabindex="-1"><a class="header-anchor" href="#includes"><span>includes()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用于判断字符串是否包含指定的子字符串。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lastindexof" tabindex="-1"><a class="header-anchor" href="#lastindexof"><span>lastIndexOf()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回某个指定的字符串值在字符串中最后出现的位置。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match"><span>match()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">l</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// (3) [&#39;l&#39;, &#39;l&#39;, &#39;l&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat"><span>repeat()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 字符串复制指定次数</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello worldhello worldhello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace" tabindex="-1"><a class="header-anchor" href="#replace"><span>replace()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hezlo world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replaceall" tabindex="-1"><a class="header-anchor" href="#replaceall"><span>replaceAll()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串，该函数会替换所有匹配到的子字符串。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hezzo worzd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search" tabindex="-1"><a class="header-anchor" href="#search"><span>search()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">l</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="slice" tabindex="-1"><a class="header-anchor" href="#slice"><span>slice()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 可提取字符串的某个部分，并以新的字符串返回被提取的部分</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// llo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split"><span>split()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 把一个字符串分割成字符串数组</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;hello&#39;, &#39;world&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="startswith" tabindex="-1"><a class="header-anchor" href="#startswith"><span>startsWith()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用于检测字符串是否以指定的子字符串开始。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="substr" tabindex="-1"><a class="header-anchor" href="#substr"><span>substr()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在字符串中抽取从 开始 下标开始的指定数目的字符。</span>
<span class="token comment">// substr() 的参数指定的是子串的开始位置和长度，因此它可以替代 substring() 和 slice() 来使用。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// llo w</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="substring" tabindex="-1"><a class="header-anchor" href="#substring"><span>substring()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// substring() 方法用于提取字符串中介于两个指定下标之间的字符。</span>
<span class="token comment">// substring() 方法返回的子串包括 开始 处的字符，但不包括 结束 处的字符。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// llo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="touppercase" tabindex="-1"><a class="header-anchor" href="#touppercase"><span>toUpperCase()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用于把字符串转换为大写</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// HELLO WORLD</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tolowercase" tabindex="-1"><a class="header-anchor" href="#tolowercase"><span>toLowerCase()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用于把字符串转换为小写</span>
    <span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&quot;HELLO WORLD&quot;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trim" tabindex="-1"><a class="header-anchor" href="#trim"><span>trim()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 去除字符串两边的空白</span>
    <span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&quot;  HELLO WORLD  &quot;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token comment">// &#39;  HELLO WORLD  &#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// HELLO WORLD</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tolocalelowercase" tabindex="-1"><a class="header-anchor" href="#tolocalelowercase"><span>toLocaleLowerCase()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 根据本地主机的语言环境把字符串转换为小写</span>
    <span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&quot;HELLO WORLD&quot;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tolocaleuppercase" tabindex="-1"><a class="header-anchor" href="#tolocaleuppercase"><span>toLocaleUpperCase()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 根据本地主机的语言环境把字符串转换为大写。</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// HELLO WORLD</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="valueof" tabindex="-1"><a class="header-anchor" href="#valueof"><span>valueOf()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回 String 对象的原始值:</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring"><span>toString()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回一个 String 对象的值:</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),l=[p];function o(c,i){return s(),a("div",null,l)}const d=n(e,[["render",o],["__file","13.Stringduixiang.html.vue"]]),u=JSON.parse('{"path":"/docs/JavaScript/13.Stringduixiang.html","title":"String对象","lang":"zh-CN","frontmatter":{"title":"String对象","date":"2023-01-14T00:00:00.000Z","tags":["JavaScript"],"categories":["JavaScript"]},"headers":[{"level":2,"title":"String 对象属性","slug":"string-对象属性","link":"#string-对象属性","children":[]},{"level":2,"title":"Number 对象方法","slug":"number-对象方法","link":"#number-对象方法","children":[{"level":3,"title":"charAt()","slug":"charat","link":"#charat","children":[]},{"level":3,"title":"charCodeAt()","slug":"charcodeat","link":"#charcodeat","children":[]},{"level":3,"title":"concat()","slug":"concat","link":"#concat","children":[]},{"level":3,"title":"endsWith()","slug":"endswith","link":"#endswith","children":[]},{"level":3,"title":"fromCharCode()","slug":"fromcharcode","link":"#fromcharcode","children":[]},{"level":3,"title":"indexOf()","slug":"indexof","link":"#indexof","children":[]},{"level":3,"title":"includes()","slug":"includes","link":"#includes","children":[]},{"level":3,"title":"lastIndexOf()","slug":"lastindexof","link":"#lastindexof","children":[]},{"level":3,"title":"match()","slug":"match","link":"#match","children":[]},{"level":3,"title":"repeat()","slug":"repeat","link":"#repeat","children":[]},{"level":3,"title":"replace()","slug":"replace","link":"#replace","children":[]},{"level":3,"title":"replaceAll()","slug":"replaceall","link":"#replaceall","children":[]},{"level":3,"title":"search()","slug":"search","link":"#search","children":[]},{"level":3,"title":"slice()","slug":"slice","link":"#slice","children":[]},{"level":3,"title":"split()","slug":"split","link":"#split","children":[]},{"level":3,"title":"startsWith()","slug":"startswith","link":"#startswith","children":[]},{"level":3,"title":"substr()","slug":"substr","link":"#substr","children":[]},{"level":3,"title":"substring()","slug":"substring","link":"#substring","children":[]},{"level":3,"title":"toUpperCase()","slug":"touppercase","link":"#touppercase","children":[]},{"level":3,"title":"toLowerCase()","slug":"tolowercase","link":"#tolowercase","children":[]},{"level":3,"title":"trim()","slug":"trim","link":"#trim","children":[]},{"level":3,"title":"toLocaleLowerCase()","slug":"tolocalelowercase","link":"#tolocalelowercase","children":[]},{"level":3,"title":"toLocaleUpperCase()","slug":"tolocaleuppercase","link":"#tolocaleuppercase","children":[]},{"level":3,"title":"valueOf()","slug":"valueof","link":"#valueof","children":[]},{"level":3,"title":"toString()","slug":"tostring","link":"#tostring","children":[]}]}],"git":{"createdTime":1679887873000,"updatedTime":1679887873000,"contributors":[{"name":"liweijiang","email":"916215061@qq.com","commits":1}]},"filePathRelative":"docs/JavaScript/13.String对象.md","readingTime":{"minutes":5.05,"words":1516}}');export{d as comp,u as data};
