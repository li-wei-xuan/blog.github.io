import{_ as n,o as s,c as a,a as t}from"./app-EaupiRXX.js";const e={},p=t(`<h3 id="partial-type" tabindex="-1"><a class="header-anchor" href="#partial-type"><span>Partial&lt;Type&gt;</span></a></h3><p>构造类型Type，并将它所有的属性设置为可选的。它的返回类型表示输入类型的所有子类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token literal-property property">todo</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;clean bathroom&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { title: &#39;clean bathroom&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="readonly-type" tabindex="-1"><a class="header-anchor" href="#readonly-type"><span>Readonly&lt;Type&gt;</span></a></h3><p>构造类型Type，并将它所有的属性设置为readonly，也就是说构造出的类型的属性不能被再次赋值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token literal-property property">todo</span><span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;clean bathroom&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&quot;readonly description&quot;</span>
<span class="token punctuation">}</span>
todo<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;readonly title&#39;</span> <span class="token comment">// 无法为“title”赋值，因为它是只读属性。</span>

<span class="token comment">// 这个工具可用来表示在运行时会失败的赋值表达式（比如，当尝试给冻结对象的属性再次赋值时）。</span>

Object<span class="token punctuation">.</span>freeze
    <span class="token keyword">function</span> freeze<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="record-keys-type" tabindex="-1"><a class="header-anchor" href="#record-keys-type"><span>Record&lt;Keys, Type&gt;</span></a></h3><p>构造一个类型，其属性名的类型为K，属性值的类型为T。这个工具可用来将某个类型的属性映射到另一个类型上。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type <span class="token constant">K</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> 

<span class="token keyword">let</span> <span class="token literal-property property">todo</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pick-type-keys" tabindex="-1"><a class="header-anchor" href="#pick-type-keys"><span>Pick&lt;Type, Keys&gt;</span></a></h3><p>从类型Type中挑选部分属性Keys来构造类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token literal-property property">completed</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type <span class="token constant">K</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;completed&#39;</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Learn TypeScript&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omit-type-keys" tabindex="-1"><a class="header-anchor" href="#omit-type-keys"><span>Omit&lt;Type, Keys&gt;</span></a></h3><p>从类型Type中获取所有属性，然后从中剔除Keys属性后构造一个类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token literal-property property">completed</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type ListType <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;description&#39;</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> <span class="token literal-property property">list</span><span class="token operator">:</span> ListType <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exclude-type-excludedunion" tabindex="-1"><a class="header-anchor" href="#exclude-type-excludedunion"><span>Exclude&lt;Type, ExcludedUnion&gt;</span></a></h3><p>从类型Type中剔除所有可以赋值给ExcludedUnion的属性，然后构造一个类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>type Todo <span class="token operator">=</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;description&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;completed&#39;</span>

type ListType <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;description&#39;</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> <span class="token literal-property property">list</span><span class="token operator">:</span> ListType <span class="token operator">=</span> <span class="token string">&#39;completed&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extract-type-union" tabindex="-1"><a class="header-anchor" href="#extract-type-union"><span>Extract&lt;Type, Union&gt;</span></a></h3><p>从类型Type中提取所有可以赋值给Union的类型，然后构造一个类型</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>type <span class="token constant">T</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;f&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;c&quot;</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span>string <span class="token operator">|</span> number <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Function<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nonnullable-type" tabindex="-1"><a class="header-anchor" href="#nonnullable-type"><span>NonNullable&lt;Type&gt;</span></a></h3><p>从类型Type中剔除null和undefined，然后构造一个类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>type <span class="token constant">T</span> <span class="token operator">=</span>  NonNullable<span class="token operator">&lt;</span><span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> string <span class="token operator">|</span> number<span class="token operator">&gt;</span> <span class="token comment">// &#39;string&#39; | &#39;number&#39;</span>
type <span class="token constant">T1</span> <span class="token operator">=</span>  NonNullable<span class="token operator">&lt;</span><span class="token keyword">null</span> <span class="token operator">|</span> string <span class="token operator">|</span> number <span class="token operator">|</span> boolean<span class="token operator">&gt;</span> <span class="token comment">// &#39;string&#39; | &#39;number&#39; | &#39;boolean&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parameters-type" tabindex="-1"><a class="header-anchor" href="#parameters-type"><span>Parameters&lt;Type&gt;</span></a></h3><p>由函数类型Type的参数类型来构建出一个元组类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>declare <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">;</span> b<span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

type <span class="token constant">T0</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    []</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">s</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    [s: string]</span>
type <span class="token constant">T2</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    [arg: unknown]</span>
type <span class="token constant">T3</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f1<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    [arg: { a: number; b: string; }]</span>
type <span class="token constant">T4</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    unknown[]</span>
type <span class="token constant">T5</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>never<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    never</span>
type <span class="token constant">T6</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//   never</span>
<span class="token comment">//   Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.</span>
type <span class="token constant">T7</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>Function<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//   never</span>
<span class="token comment">//   Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructorparameters-type" tabindex="-1"><a class="header-anchor" href="#constructorparameters-type"><span>ConstructorParameters&lt;Type&gt;</span></a></h3><p>由构造函数类型来构建出一个元组类型或数组类型。<br> 由构造函数类型Type的参数类型来构建出一个元组类型。（若Type不是构造函数类型，则返回never）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>type <span class="token constant">T0</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>ErrorConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    [message?: string | undefined]</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>FunctionConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    string[]</span>
type <span class="token constant">T2</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>RegExpConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    [pattern: string | RegExp, flags?: string | undefined]</span>
type <span class="token constant">T3</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//   unknown[]</span>

type <span class="token constant">T4</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>Function<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//    never</span>
<span class="token comment">// Type &#39;Function&#39; does not satisfy the constraint &#39;new (...args: any) =&gt; any&#39;.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="returntype-type" tabindex="-1"><a class="header-anchor" href="#returntype-type"><span>ReturnType&lt;Type&gt;</span></a></h3><p>由函数类型Type的返回值类型构建一个新类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>type <span class="token constant">T0</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// string</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">s</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// void</span>
type <span class="token constant">T2</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// {}</span>
type <span class="token constant">T3</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// number[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instancetype-type" tabindex="-1"><a class="header-anchor" href="#instancetype-type"><span>InstanceType&lt;Type&gt;</span></a></h3><p>由构造函数类型Type的实例类型来构建一个新类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type <span class="token constant">T0</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// C</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// any</span>
type <span class="token constant">T2</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span>never<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// any</span>
type <span class="token constant">T3</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
type <span class="token constant">T4</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span>Function<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="required-type" tabindex="-1"><a class="header-anchor" href="#required-type"><span>Required&lt;Type&gt;</span></a></h3><p>构建一个类型，使类型Type的所有属性为required。 与此相反的是Partial。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
    a<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
    b<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> Props <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>

<span class="token keyword">const</span> <span class="token literal-property property">obj2</span><span class="token operator">:</span> Required<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Error: property &#39;b&#39; missing</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="thisparametertype-type" tabindex="-1"><a class="header-anchor" href="#thisparametertype-type"><span>ThisParameterType&lt;Type&gt;</span></a></h3><p>从函数类型中提取 this 参数的类型。 若函数类型不包含 this 参数，则返回 unknown 类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">numberToString</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> ThisParameterType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omitthisparameter-type" tabindex="-1"><a class="header-anchor" href="#omitthisparameter-type"><span>OmitThisParameter&lt;Type&gt;</span></a></h3><p>从Type类型中剔除 this 参数。 若未声明 this 参数，则结果类型为 Type 。<br> 否则，由Type类型来构建一个不带this参数的类型。 泛型会被忽略，并且只有最后的重载签名会被采用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">fiveToHex</span><span class="token operator">:</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fiveToHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="thistype-type" tabindex="-1"><a class="header-anchor" href="#thistype-type"><span>ThisType&lt;Type&gt;</span></a></h3><p>这个工具不会返回一个转换后的类型。 它做为上下文的this类型的一个标记。<br> 注意，若想使用此类型，必须启用--noImplicitThis。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Compile with --noImplicitThis</span>
type ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    data<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">D</span><span class="token punctuation">;</span>
    methods<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">M</span> <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span><span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Type of &#39;this&#39; in methods is D &amp; M</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> makeObject<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>desc<span class="token operator">:</span> ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">data</span><span class="token operator">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token literal-property property">methods</span><span class="token operator">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>methods <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>methods <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">makeObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">dx</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">dy</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> dx<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> dy<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),o=[p];function l(c,r){return s(),a("div",null,o)}const u=n(e,[["render",l],["__file","05.shiyonggongjuleixing.html.vue"]]),k=JSON.parse('{"path":"/docs/TypeScript/05.shiyonggongjuleixing.html","title":"实用工具类型","lang":"zh-CN","frontmatter":{"title":"实用工具类型","date":"2024-07-05T00:00:00.000Z","tags":["TypeScript"]},"headers":[{"level":3,"title":"Partial<Type>","slug":"partial-type","link":"#partial-type","children":[]},{"level":3,"title":"Readonly<Type>","slug":"readonly-type","link":"#readonly-type","children":[]},{"level":3,"title":"Record<Keys, Type>","slug":"record-keys-type","link":"#record-keys-type","children":[]},{"level":3,"title":"Pick<Type, Keys>","slug":"pick-type-keys","link":"#pick-type-keys","children":[]},{"level":3,"title":"Omit<Type, Keys>","slug":"omit-type-keys","link":"#omit-type-keys","children":[]},{"level":3,"title":"Exclude<Type, ExcludedUnion>","slug":"exclude-type-excludedunion","link":"#exclude-type-excludedunion","children":[]},{"level":3,"title":"Extract<Type, Union>","slug":"extract-type-union","link":"#extract-type-union","children":[]},{"level":3,"title":"NonNullable<Type>","slug":"nonnullable-type","link":"#nonnullable-type","children":[]},{"level":3,"title":"Parameters<Type>","slug":"parameters-type","link":"#parameters-type","children":[]},{"level":3,"title":"ConstructorParameters<Type>","slug":"constructorparameters-type","link":"#constructorparameters-type","children":[]},{"level":3,"title":"ReturnType<Type>","slug":"returntype-type","link":"#returntype-type","children":[]},{"level":3,"title":"InstanceType<Type>","slug":"instancetype-type","link":"#instancetype-type","children":[]},{"level":3,"title":"Required<Type>","slug":"required-type","link":"#required-type","children":[]},{"level":3,"title":"ThisParameterType<Type>","slug":"thisparametertype-type","link":"#thisparametertype-type","children":[]},{"level":3,"title":"OmitThisParameter<Type>","slug":"omitthisparameter-type","link":"#omitthisparameter-type","children":[]},{"level":3,"title":"ThisType<Type>","slug":"thistype-type","link":"#thistype-type","children":[]}],"git":{"createdTime":1720420551000,"updatedTime":1720420551000,"contributors":[{"name":"lwj","email":"916215061@qq.com","commits":1}]},"filePathRelative":"docs/TypeScript/05.实用工具类型.md","readingTime":{"minutes":3.83,"words":1150}}');export{u as comp,k as data};
