import{_ as t,o as e,c as n,a}from"./app-EaupiRXX.js";const l={},s=a(`<h2 id="什么是正则表达式" tabindex="-1"><a class="header-anchor" href="#什么是正则表达式"><span>什么是正则表达式</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。</p></div><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/正则表达式主体/修饰符(可选)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="模式修正符" tabindex="-1"><a class="header-anchor" href="#模式修正符"><span>模式修正符</span></a></h3><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>i</code></td><td style="text-align:left;">不区分大小写</td></tr><tr><td style="text-align:left;"><code>m</code></td><td style="text-align:left;">视为多行</td></tr><tr><td style="text-align:left;"><code>s</code></td><td style="text-align:left;">匹配空白字符</td></tr><tr><td style="text-align:left;"><code>g</code></td><td style="text-align:left;">全局匹配</td></tr></tbody></table><h3 id="限定符" tabindex="-1"><a class="header-anchor" href="#限定符"><span>限定符</span></a></h3><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">匹配前面的子表达式零次或多次。* 等价于{0,}。</td></tr><tr><td style="text-align:left;"><code>+</code></td><td style="text-align:left;">匹配前面的子表达式一次或多次。+ 等价于 {1,}。</td></tr><tr><td style="text-align:left;"><code>?</code></td><td style="text-align:left;">匹配前面的子表达式零次或一次。? 等价于 {0,1}。</td></tr><tr><td style="text-align:left;"><code>{n}</code></td><td style="text-align:left;">n 是一个非负整数。匹配确定的 n 次。</td></tr><tr><td style="text-align:left;"><code>{n,}</code></td><td style="text-align:left;">n 是一个非负整数。至少匹配n 次。</td></tr><tr><td style="text-align:left;"><code>{n,m}</code></td><td style="text-align:left;">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。(注意在逗号和两个数之间不能有空格)</td></tr></tbody></table><h3 id="定位符" tabindex="-1"><a class="header-anchor" href="#定位符"><span>定位符</span></a></h3><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>^</code></td><td style="text-align:left;">匹配输入字符串开始的位置。</td></tr><tr><td style="text-align:left;"><code>$</code></td><td style="text-align:left;">匹配输入字符串结尾的位置。</td></tr><tr><td style="text-align:left;"><code>\\b</code></td><td style="text-align:left;">匹配一个字边界，即字与空格间的位置。</td></tr><tr><td style="text-align:left;"><code>\\B</code></td><td style="text-align:left;">非字边界匹配。</td></tr></tbody></table><h3 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符"><span>元字符</span></a></h3><table><thead><tr><th style="text-align:left;">元字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>.</code></td><td style="text-align:left;">匹配任意单个字符</td></tr><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">匹配前面的字符零次或多次 等同于 ｛0，｝</td></tr><tr><td style="text-align:left;"><code>+</code></td><td style="text-align:left;">匹配前面的字符一次或多次 等同于 ｛1，｝</td></tr><tr><td style="text-align:left;"><code>?</code></td><td style="text-align:left;">匹配前面的字符零次或一次 等同于 ｛0，1｝</td></tr><tr><td style="text-align:left;"><code>|</code></td><td style="text-align:left;">匹配两个或多个选择</td></tr><tr><td style="text-align:left;"><code>^</code></td><td style="text-align:left;">匹配字符串的开始位置</td></tr><tr><td style="text-align:left;"><code>$</code></td><td style="text-align:left;">匹配字符串结束位置</td></tr><tr><td style="text-align:left;"><code>[]</code></td><td style="text-align:left;">匹配方括号中的任一字符</td></tr><tr><td style="text-align:left;"><code>[^]</code></td><td style="text-align:left;">匹配除方括号中的字符外的任何字符</td></tr><tr><td style="text-align:left;"><code>\\w</code></td><td style="text-align:left;">匹配字母、数字、下划线</td></tr><tr><td style="text-align:left;"><code>\\W</code></td><td style="text-align:left;">匹配除了字母、数字、下划线</td></tr><tr><td style="text-align:left;"><code>\\d</code></td><td style="text-align:left;">匹配数字，等价于0-9</td></tr><tr><td style="text-align:left;"><code>\\D</code></td><td style="text-align:left;">匹配非数字，等价于^0-9</td></tr><tr><td style="text-align:left;"><code>\\s</code></td><td style="text-align:left;">匹配任何空白字符，包括空格，制表符，换行符等等。等价于[\\f\\n\\r\\t\\v]</td></tr><tr><td style="text-align:left;"><code>\\S</code></td><td style="text-align:left;">匹配非空白字符，等价于^\\f\\n\\r\\t\\v</td></tr></tbody></table><h3 id="正则方法" tabindex="-1"><a class="header-anchor" href="#正则方法"><span>正则方法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回匹配数组</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 匹配成功返回true 失败返回false</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),d=[s];function i(o,c){return e(),n("div",null,d)}const p=t(l,[["render",i],["__file","10.zhengzebiaodashi.html.vue"]]),g=JSON.parse('{"path":"/docs/JavaScript/10.zhengzebiaodashi.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"title":"正则表达式","date":"2022-10-20T00:00:00.000Z","tags":["JavaScript","interview"],"categories":["JavaScript","interview"]},"headers":[{"level":2,"title":"什么是正则表达式","slug":"什么是正则表达式","link":"#什么是正则表达式","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"模式修正符","slug":"模式修正符","link":"#模式修正符","children":[]},{"level":3,"title":"限定符","slug":"限定符","link":"#限定符","children":[]},{"level":3,"title":"定位符","slug":"定位符","link":"#定位符","children":[]},{"level":3,"title":"元字符","slug":"元字符","link":"#元字符","children":[]},{"level":3,"title":"正则方法","slug":"正则方法","link":"#正则方法","children":[]}]}],"git":{"createdTime":1679887873000,"updatedTime":1687830860000,"contributors":[{"name":"liweijiang","email":"916215061@qq.com","commits":2}]},"filePathRelative":"docs/JavaScript/10.正则表达式.md","readingTime":{"minutes":1.91,"words":573}}');export{p as comp,g as data};
