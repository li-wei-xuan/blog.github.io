import{_ as e,p as n,q as a,s as t,R as s,Y as l}from"./framework-aa5c4115.js";const i={},o=t("h2",{id:"什么是正则表达式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#什么是正则表达式","aria-hidden":"true"},"#"),s(" 什么是正则表达式")],-1),r=t("div",{class:"custom-container tip"},[t("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[t("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[t("circle",{cx:"12",cy:"12",r:"9"}),t("path",{d:"M12 8h.01"}),t("path",{d:"M11 12h1v4h1"})])]),t("p",{class:"custom-container-title"},"TIP"),t("p",null,"正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。")],-1),d=l(`<h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/正则表达式主体/修饰符(可选)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="模式修正符" tabindex="-1"><a class="header-anchor" href="#模式修正符" aria-hidden="true">#</a> 模式修正符</h3><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">i</td><td style="text-align:left;">不区分大小写</td></tr><tr><td style="text-align:left;">m</td><td style="text-align:left;">视为多行</td></tr><tr><td style="text-align:left;">s</td><td style="text-align:left;">匹配空白字符</td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">全局匹配</td></tr></tbody></table><h3 id="限定符" tabindex="-1"><a class="header-anchor" href="#限定符" aria-hidden="true">#</a> 限定符</h3><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">描述</th></tr></thead></table><ul><li>|匹配前面的子表达式零次或多次。* 等价于{0,}。</li></ul><ul><li>|匹配前面的子表达式一次或多次。+ 等价于 {1,}。 ? |匹配前面的子表达式零次或一次。? 等价于 {0,1}。 {n}| n 是一个非负整数。匹配确定的 n 次。 {n,}| n 是一个非负整数。至少匹配n 次。 {n,m}| m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。(注意在逗号和两个数之间不能有空格)</li></ul><h3 id="定位符" tabindex="-1"><a class="header-anchor" href="#定位符" aria-hidden="true">#</a> 定位符</h3><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">^</td><td style="text-align:left;">匹配输入字符串开始的位置。。</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">匹配输入字符串结尾的位置。</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">匹配一个字边界，即字与空格间的位置。</td></tr><tr><td style="text-align:left;">\\B</td><td style="text-align:left;">非字边界匹配。</td></tr></tbody></table><h3 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符" aria-hidden="true">#</a> 元字符</h3><table><thead><tr><th style="text-align:left;">元字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配任意单个字符</td></tr></tbody></table><ul><li>|匹配前面的字符零次或多次 等同于 ｛0，｝</li></ul><ul><li>|匹配前面的字符一次或多次 等同于 ｛1，｝ ? ? |匹配前面的字符零次或一次 等同于 ｛0，1｝ | |匹配两个或多个选择 ^ |匹配字符串的开始位置 $ |匹配字符串结束位置 [] |匹配方括号中的任一字符 [^] |匹配除方括号中的字符外的任何字符 \\w |匹配字母、数字、下划线 \\W |匹配除了字母、数字、下划线 \\d |匹配数字，等价于0-9 \\D |匹配非数字，等价于^0-9 \\s |匹配任何空白字符，包括空格，制表符，换行符等等。等价于[\\f\\n\\r\\t\\v] \\S |匹配非空白字符，等价于^\\f\\n\\r\\t\\v</li></ul><h3 id="正则方法" tabindex="-1"><a class="header-anchor" href="#正则方法" aria-hidden="true">#</a> 正则方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 返回匹配数组</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 匹配成功返回true 失败返回false</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),c=[o,r,d];function p(u,h){return n(),a("div",null,c)}const x=e(i,[["render",p],["__file","10.zhengzebiaodashi.html.vue"]]);export{x as default};
