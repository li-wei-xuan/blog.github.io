import{_ as a,p as s,q as n,Y as e}from"./framework-aa5c4115.js";const t={},p=e(`<h1 id="css-cascading-style-sheets-元素的显示方式" tabindex="-1"><a class="header-anchor" href="#css-cascading-style-sheets-元素的显示方式" aria-hidden="true">#</a> CSS( Cascading Style Sheets )---- 元素的显示方式</h1><h2 id="层叠样式表" tabindex="-1"><a class="header-anchor" href="#层叠样式表" aria-hidden="true">#</a> 层叠样式表</h2><blockquote><p><strong>层叠:相同的样式名的不同值作用到同一元素的时候,会有样式被覆盖.</strong></p><p>样式生效会有先后重要的顺序.根据样式优先级,如果优先级一样,后写会覆盖先写的.</p><p><strong>样式表:元素视觉表现的集合,样式是依附HTML而存在的</strong></p><p><strong>注意:</strong></p><p>​ 网页实际上是一个多层的结构,通过css可以分别为网页的每一个层来设置样式,最终我们看到的也只是网页最上面的一层.</p></blockquote><h2 id="最小影响法则" tabindex="-1"><a class="header-anchor" href="#最小影响法则" aria-hidden="true">#</a> 最小影响法则</h2><blockquote><p>当我们创建一个标签之后,高度为0px,无色无味透明.</p></blockquote><h2 id="单位" tabindex="-1"><a class="header-anchor" href="#单位" aria-hidden="true">#</a> 单位</h2><h3 id="像素px单位" tabindex="-1"><a class="header-anchor" href="#像素px单位" aria-hidden="true">#</a> 像素px单位</h3><blockquote><p><strong>屏幕(显示器),实际上是由一个个发光小圆格所显示.</strong></p><p>并且这个发光原件要能显示这个世界上所有的颜色的话,这个发光原件要有三种颜色,即我们光学三原色红绿蓝.这三个颜色组合在一起,可以表现一个点的颜色,一个点就是一个像素大小.</p><p>分辨率1920✖1080的,这两个数字就代表屏幕横向1920个像素单位,纵向1080个像素单位.</p><p>不同屏幕的像素大小是不同的,像素越小的屏幕显示的效果越清晰.</p><p>像素是一个相对单位,同样的300px在不同的显示设备效果不一样.</p></blockquote><h3 id="百分比单位" tabindex="-1"><a class="header-anchor" href="#百分比单位" aria-hidden="true">#</a> 百分比单位</h3><blockquote><p>也可以将属性值设置为相对于父元素属性的百分比</p><p>设置百分比可以使里面子元素跟父元素的改变而改变</p></blockquote><h2 id="css注释" tabindex="-1"><a class="header-anchor" href="#css注释" aria-hidden="true">#</a> css注释</h2><blockquote><p>注释里面的内容会自动被游览器忽略</p><p>/* 这是css注释 */</p></blockquote><h2 id="三种引入方式" tabindex="-1"><a class="header-anchor" href="#三种引入方式" aria-hidden="true">#</a> 三种引入方式</h2><h3 id="行内样式" tabindex="-1"><a class="header-anchor" href="#行内样式" aria-hidden="true">#</a> 行内样式</h3><blockquote><p><strong>在标签内部通过style属性来设置元素的样式</strong></p><p>问题:</p><p>​ 1.结构和样式未分离,会影响到代码结构的观察和维护.</p><p>​ 2.样式只能对一个标签生效.不能统一去设置,当样式改变,必须一个个修改,不方便.</p><p>​ 开发中绝对不要使用内联样式.</p></blockquote><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>&lt;div style=<span class="token string">&quot;width: 500px; height: 500px; background-color:pink&quot;</span>&gt;&lt;/div&gt;
<span class="token comment">/*现在我们设置style属性名,里面是我们的属性值.
 里面样式代码的设置格式为：样式名称:样式值.*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内联样式" tabindex="-1"><a class="header-anchor" href="#内联样式" aria-hidden="true">#</a> 内联样式</h3><blockquote><p>将样式在head中的style标签里</p><p>然后通过css选择器来选中元素为其设置各种样式</p><p>好处:</p><p>​ 同时可以为多个标签设置样式,并且修改时只需修改一处即可全部应用</p><p>小型项目或者写一些demo小案例的时候使用内联样式,</p><p>内联样式更方便对样式进行复用</p><p>mdn</p><p><strong>问题:</strong></p><p>​ 我们内部样式表只能对一个网页起作用</p><p>​ 它里面的样式不能跨页面进行复用</p></blockquote><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">&lt;style type=&quot;text/css&quot;&gt;
	div</span><span class="token punctuation">{</span>
		<span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token comment">/*元素宽度*/</span>
		<span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token comment">/*元素高度*/</span>
         <span class="token property">padding</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token comment">/*内边距*/</span>
         <span class="token property">margin</span><span class="token punctuation">:</span>外边距<span class="token punctuation">;</span><span class="token comment">/*外边距*/</span>
         <span class="token property">background-color</span><span class="token punctuation">:</span>lightgreen<span class="token punctuation">;</span><span class="token comment">/*背景颜色*/</span>
         <span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token comment">/*文字颜色*/</span>
         <span class="token property">font-size</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token comment">/*文字大小*/</span>
        
        <span class="token comment">/*css基本语法:
        	选择器 + 声明块
        		选择器 通过选择器可以选中页面特定的元素
        		声明块  通过声明块为元素设置样式
        				声明块由一个个声明构成
        				声明是一个名值结构
        				一个样式名对应一个样式值,名值之间以:链接,以;结尾*/</span>
	<span class="token punctuation">}</span>
&lt;/style&gt;

&lt;div&gt;洪荒宇宙&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外联样式" tabindex="-1"><a class="header-anchor" href="#外联样式" aria-hidden="true">#</a> 外联样式</h3><blockquote><p>可以将css样式编写到一个外部的css文件中,然后通过link标签来引入外部的css文件.</p><p>保证了结构和样式的分离,让代码各司其职.让css在不同的页面之间对其进行复用.</p><ol><li><p>引入式 link标签 开发中最佳的使用方式</p><p>​ 语法 <link rel="stylesheet" href="1.css"></p></li><li><p>导入式 @import 必须写在行首 了解一下**</p><p>​ 语法: @import url(&quot;./css/2.css&quot;);</p></li></ol><p>将样式编写到外部的css文件中,可以利用到游览器的缓存机制</p><p>从而加快网页的加载速度,提升用户的体验</p></blockquote><h2 id="元素命名" tabindex="-1"><a class="header-anchor" href="#元素命名" aria-hidden="true">#</a> 元素命名</h2><p><strong>命名是建立样式与标签的桥梁,</strong></p><h3 id="id命名" tabindex="-1"><a class="header-anchor" href="#id命名" aria-hidden="true">#</a> id命名</h3><blockquote><p>唯一性(页面一个元素名字只能一个id名字,不能出现重复).</p><p><strong>id命名主要用于大结构框架和js元素控制上.</strong></p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>yunmu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="class-类名命名" tabindex="-1"><a class="header-anchor" href="#class-类名命名" aria-hidden="true">#</a> class(类名命名)</h3><blockquote><p><strong>可以有多个,重复使用,只是一个分类,只要具有相似的属性的物体都会分到同一个类中.</strong></p><p><strong>主要用于元素样式的设置.</strong></p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范" aria-hidden="true">#</a> 命名规范</h3><blockquote><p>命名规范</p><p>1.必须以字母开头命名选择器，这样可保证在所有浏览器下都能兼容；</p><p>2.不允许单个字母的选择器出现；</p><p>3.不允许命名带有广告等英文的单词，例如ad,adv,adver,advertising，已防止该模块被浏览器当成垃圾广告过滤掉。任何文件的命名均如此。</p><p>4.下划线 ’ _ ’ 禁止出现在class命名中，全小写,统一使用’-‘连字符.</p><p>5.禁止驼峰命名 className</p><p>6.见名知意</p></blockquote><h2 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h2><h3 id="常用选择器" tabindex="-1"><a class="header-anchor" href="#常用选择器" aria-hidden="true">#</a> 常用选择器</h3><h4 id="_1-元素选择器" tabindex="-1"><a class="header-anchor" href="#_1-元素选择器" aria-hidden="true">#</a> 1.元素选择器</h4><blockquote><p>作用: 根据标签名选中指定的元素</p><p>语法 : 标签名 {}</p><p>例子: p{} h1{} span{}</p><p>缺点 指向不明确 容易造成样式污染</p></blockquote><h4 id="_2-id选择器" tabindex="-1"><a class="header-anchor" href="#_2-id选择器" aria-hidden="true">#</a> 2.id选择器</h4><blockquote><p>作用:根据一个元素的id属性去选中一个元素</p><p>语法:#id属性值{}</p><p>例子: #box #yunmu</p></blockquote><h4 id="_3-class类选择器" tabindex="-1"><a class="header-anchor" href="#_3-class类选择器" aria-hidden="true">#</a> 3.class类选择器</h4><blockquote><p>作用:根据元素的class属性值选中一组元素</p><p>语法:.class属性值{}</p></blockquote><h4 id="_4-通配符选择器" tabindex="-1"><a class="header-anchor" href="#_4-通配符选择器" aria-hidden="true">#</a> 4..通配符选择器</h4><blockquote><p>作用:选中页面所有标签</p><p>(比较多的作用消除默认样式)</p><p>语法 * {}</p><p>缺点:选中所有元素,性能浪费,不建议使用</p></blockquote><h3 id="复合选择器" tabindex="-1"><a class="header-anchor" href="#复合选择器" aria-hidden="true">#</a> 复合选择器</h3><h4 id="_1-交集选择器" tabindex="-1"><a class="header-anchor" href="#_1-交集选择器" aria-hidden="true">#</a> 1.交集选择器</h4><blockquote><p>作用:同时选中多个条件的元素</p><p>语法:选择器1选择器2选择器3选择器n{}</p><p><strong>注意:</strong></p><p>​ 交集选择器如果有元素选择器,必须使用元素选择器开头</p></blockquote><h4 id="_2-并集选择器" tabindex="-1"><a class="header-anchor" href="#_2-并集选择器" aria-hidden="true">#</a> 2.并集选择器</h4><blockquote><p>作用:同时选择多个元素对应的元素</p><p>语法:选择器1 , 选择器 2 , 选择器3 , 选择器n{}</p></blockquote><h3 id="元素关系选择器" tabindex="-1"><a class="header-anchor" href="#元素关系选择器" aria-hidden="true">#</a> 元素关系选择器</h3><blockquote><p>就是当前元素根据与其他元素的关系选择元素的选择器</p><p>主要是为了减少命名</p></blockquote><p><strong>元素关系</strong></p><blockquote><p><strong>父元素</strong></p><p>​ ---直接包含子元素的元素叫做父元素</p><p><strong>子元素</strong></p><p>​ ---直接被父元素包含的元素是子元素</p><p><strong>祖先元素</strong></p><p>​ ----直接或间接后代元素的元素叫祖先元素 ​ 一个元素的父元素也是它的祖先元素</p><p><strong>后代元素</strong></p><p>​ ----直接或间接被祖先元素包含的元素叫做后代元素</p><p>​ ----子元素也是后代元素</p><p><strong>兄弟元素</strong></p><p>​ ----拥有相同父元素的元素是兄弟元素</p></blockquote><h4 id="_1-子元素选择器" tabindex="-1"><a class="header-anchor" href="#_1-子元素选择器" aria-hidden="true">#</a> 1.子元素选择器</h4><blockquote><p>作用:选中指定父元素的指定子元素</p><p>语法: 父元素 &gt; 子元素 用 &gt; 表示</p></blockquote><h4 id="_2-后代元素选择器" tabindex="-1"><a class="header-anchor" href="#_2-后代元素选择器" aria-hidden="true">#</a> 2.后代元素选择器</h4><blockquote><p>选中指定元素的所有后代元素</p><p>语法: 祖先 后代 用空格表示</p></blockquote><h4 id="_3-相邻选择器" tabindex="-1"><a class="header-anchor" href="#_3-相邻选择器" aria-hidden="true">#</a> 3.相邻选择器</h4><blockquote><p>选中下一个兄弟</p><p>语法:前一个 + 下一个 用+连接</p></blockquote><h4 id="_4-通用兄弟选择器" tabindex="-1"><a class="header-anchor" href="#_4-通用兄弟选择器" aria-hidden="true">#</a> 4.通用兄弟选择器</h4><blockquote><p>选择下边所有兄弟(除开自己)</p><p>语法 : 兄 ~ 弟</p></blockquote><h2 id="样式优先级" tabindex="-1"><a class="header-anchor" href="#样式优先级" aria-hidden="true">#</a> 样式优先级</h2><blockquote><p>当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值时，此时就有<strong>样式冲突</strong></p><p>发生样式冲突时，应用哪个样式由选择器的权重（优先级）决定</p></blockquote><p>选择器的权重</p><blockquote><p>行内样式 --- 1,0,0,0</p><p>id选择器 --- 0,1,0,0</p><p>类名选择器class --- 0,0,1,0</p><p>元素选择器div --- 0,0,0,1</p><p>通配符，关系选择器 --- 0,0,0,0</p><p>继承的样式 --- 没有优先级</p></blockquote><blockquote><p>（分组选择器的优先级单独计算）</p><p><strong>注意:</strong></p><p>​ 选择器的累加不会超过他所在的层级</p><p>如果优先级计算后相同，则后面的样式生效</p><p>可以在某一个样式后面加!important，则此时该样式会获取到最高的优先级</p><p><strong>注意:</strong></p><p>​ 在开发中慎用！</p></blockquote><p>​</p>`,64),o=[p];function i(c,l){return s(),n("div",null,o)}const d=a(t,[["render",i],["__file","03.CSSjibenyangshihexuanzeqi.html.vue"]]);export{d as default};
