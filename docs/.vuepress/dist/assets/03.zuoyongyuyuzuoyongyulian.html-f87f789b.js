import{_ as a,p as e,q as l,Y as s,s as n,R as o}from"./framework-aa5c4115.js";const t={},i=s('<h2 id="javascript-中的作用域与作用域链" tabindex="-1"><a class="header-anchor" href="#javascript-中的作用域与作用域链" aria-hidden="true">#</a> JavaScript 中的作用域与<a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE-scope-chain">作用域链</a></h2><ol><li><a href="#%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F-global-scope">全局作用域</a></li><li><a href="#%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F-local-scope">局部作用域</a></li><li><a href="#%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F-block-scope">块级作用域</a>(ES6+新增的)</li></ol><h3 id="全局作用域-global-scope" tabindex="-1"><a class="header-anchor" href="#全局作用域-global-scope" aria-hidden="true">#</a> 全局作用域(Global Scope)</h3>',3),c=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,"直接写在script标签的JS代码，都在全局作用域"),n("li",null,"全局作用域在页面打开的时候创建，在页面关闭时销毁"),n("li",null,[o("在全局作用域中有一个对象window,它代表一个浏览器的窗口，它由浏览器创建，我们可以直接使用在全局作用域中： "),n("ol",null,[n("li",null,"创建的变量都会作为window对象的属性保存，全局中的函数都会作为window对象的方法保存"),n("li",null,"全局作用域中的变量都是全局变量，在页面的任意的部分都可以访问到")])])])],-1),p=s(`<div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>    var globalVariable = &quot;全局作用域变量&quot;
    function func() {    // 在函数内访问全局作用域的变量    
        console.log(&quot;函数内访问：&quot;, globalVariable)  //函数内访问： 全局作用域变量
    }
    func() //函数外访问： globalVariable
    console.log(&quot;外部访问：&quot;, globalVariable)  //外部访问： 全局作用域变量

    //使用 var 关键字 在大括号内（包括纯粹的大括号、if、while、for）定义的变量仍然属于全局作用域
    if (true) {
        var globalVariable = &quot;全局作用域变量&quot;
    }
    console.log(&quot;外部访问：&quot;, globalVariable) //外部访问： 全局作用域变量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="局部作用域-local-scope" tabindex="-1"><a class="header-anchor" href="#局部作用域-local-scope" aria-hidden="true">#</a> 局部作用域(Local Scope)</h3>`,2),u=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,"调用函数时创建函数作用域，函数执行完毕以后，作用域销毁"),n("li",null,"每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的"),n("li",null,"在函数作用域中可以访问全局变量，但在全局作用域中无法访问到局部变量"),n("li",null,"当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用，如果没有就向上一作用域中寻找，直到找到全局作用域，如果全局作用域中仍然没有找到，则会报错ReferenceError"),n("li",null,"在函数中想要访问全局变量可以使用window对象")])],-1),r=s(`<div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>    function func(params) {
        var localVariable = &quot;局部作用域变量&quot;
        console.log(&quot;函数内访问：&quot;, localVariable) //函数内访问： 局部作用域变量
    }
    func()
    console.log(&quot;外部访问：&quot;, localVariable) // Uncaught ReferenceError: localVariable is not defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="块作用域-block-scope" tabindex="-1"><a class="header-anchor" href="#块作用域-block-scope" aria-hidden="true">#</a> 块作用域(Block Scope)</h3>`,2),d=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,"是一个语句，将多个操作封装在一起，通常是放在一个大括号里，没有返回值。"),n("li",null,"在ES6之前，函数只能在全局作用域和函数作用域中声明，不能在块级作用域中声明。没有块级作用域导致很多场景不合理"),n("li",null,"内存变量可能覆盖外层变量"),n("li",null,"用来计数的循环变量泄露为全局变量"),n("li",null,"ES6中的块级作用域： 1、允许块级作用域任意嵌套，外层作用域无法读取内层作用域的变量 2、内层作用域可以定义外层作用域的同名变量 3、不需要立即执行匿名函数、立即执行函数")])],-1),v=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">//块作用域内的变量只能在自身作用域内被访问。</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">let</span> blockVariable <span class="token operator">=</span> <span class="token string">&quot;块作用域变量&quot;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;块内访问：&quot;</span><span class="token punctuation">,</span> blockVariable<span class="token punctuation">)</span> <span class="token comment">//块内访问： 块作用域变量</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;外部访问：&quot;</span><span class="token punctuation">,</span> blockVariable<span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: blockVariable is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用域链-scope-chain" tabindex="-1"><a class="header-anchor" href="#作用域链-scope-chain" aria-hidden="true">#</a> 作用域链(Scope Chain)</h3>`,2),k=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"当一个变量在当前作用域无法找到时，便会尝试寻找其外层的作用域，如果还找不到，再继续往外寻找（只会往外寻找，不会寻找兄弟作用域，更不会往内寻找）。这种如同链条一样的寻找规则便被称为作用域链。")],-1),b=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">let</span> variable1 <span class="token operator">=</span> <span class="token string">&quot;我是变量 1，外部的&quot;</span>
    <span class="token keyword">let</span> variable2 <span class="token operator">=</span> <span class="token string">&quot;我是变量 2，外部的&quot;</span>
    <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> variable1 <span class="token operator">=</span> <span class="token string">&quot;我是变量 1，内部的&quot;</span>
        <span class="token punctuation">{</span> <span class="token keyword">let</span> variable3 <span class="token operator">=</span> <span class="token string">&quot;我是变量 3&quot;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable1<span class="token punctuation">)</span> <span class="token comment">// 往外寻找，在上一层函数内找到了        </span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable2<span class="token punctuation">)</span> <span class="token comment">// 往外寻找，直到全局作用域     </span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable3<span class="token punctuation">)</span> <span class="token comment">// 找不到，报错 Uncaught ReferenceError: variable3 is not defined   </span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">//函数的作用域是它定义时的作用域，而不是调用时</span>
    <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> variable <span class="token operator">=</span> <span class="token string">&quot;我是 func 内的变量&quot;</span>
        <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> func2
    <span class="token punctuation">}</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">let</span> variable <span class="token operator">=</span> <span class="token string">&quot;我是大括号内的变量&quot;</span>
        <span class="token keyword">let</span> func2 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="作用域的好处" tabindex="-1"><a class="header-anchor" href="#作用域的好处" aria-hidden="true">#</a> 作用域的好处</h2>`,2),h=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,"防止命名冲突：你写了一万行的代码文件，如果没有作用域，你要给每个变量取独一无二的名字，屁股想想也知道是种折磨。"),n("li",null,"安全性： 变量不会被外部访问，保证了变量值不会被随意修改。你定义在函数内的变量，如果能在几千行之后不小心被修改，脚趾头想想也知道是种折磨。"),n("li",null,"更高级的语法：封装、面向对象等的实现离不开对变量的隔离，这是依靠作用域所达到的。")])],-1),m=[i,c,p,u,r,d,v,k,b,h];function g(w,f){return e(),l("div",null,m)}const _=a(t,[["render",g],["__file","03.zuoyongyuyuzuoyongyulian.html.vue"]]);export{_ as default};
