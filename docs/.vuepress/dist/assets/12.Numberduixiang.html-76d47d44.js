import{_ as n,p as s,q as a,Y as t}from"./framework-aa5c4115.js";const e={},p=t(`<h2 id="number-对象属性" tabindex="-1"><a class="header-anchor" href="#number-对象属性" aria-hidden="true">#</a> Number 对象属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>返回对创建此对象的 Number 函数的引用。</td></tr><tr><td>MAX_VALUE</td><td>可表示的最大的数。</td></tr><tr><td>MIN_VALUE</td><td>可表示的最小的数。</td></tr><tr><td>NEGATIVE_INFINITY</td><td>负无穷大，溢出时返回该值。</td></tr><tr><td>NaN</td><td>非数字值。</td></tr><tr><td>POSITIVE_INFINITY</td><td>正无穷大，溢出时返回该值。</td></tr><tr><td>prototype</td><td>允许您可以向对象添加属性和方法。</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 返回对创建此对象的 Number 函数的引用：</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">134.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// ƒ Number() { [native code] }</span>

  <span class="token comment">// 返回Javascript中的最大数：</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token comment">// 1.7976931348623157e+308</span>

  <span class="token comment">// 返回Javascript中的最小数</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span> <span class="token comment">// 5e-324</span>

  <span class="token comment">// 返回负无穷大:</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">NEGATIVE_INFINITY</span><span class="token punctuation">)</span> <span class="token comment">// -Infinity</span>

  <span class="token comment">// 可以把 Number 对象设置为该值，来指示其不是数字值。</span>
  <span class="token comment">// 提示： 请使用 isNaN() 全局函数来判断一个值是否是 NaN 值。</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>

  <span class="token comment">// 返回正无穷大:</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span> <span class="token comment">// Infinity</span>

  <span class="token comment">// 创建一个方法，给出了数字对象的属性，返回数字的一半价值：</span>
  <span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myMet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>myProp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创造一个 Number 对象, 调用 myMet 方法:</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  n<span class="token punctuation">.</span><span class="token function">myMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> n<span class="token punctuation">.</span>myProp<span class="token punctuation">;</span>

  <span class="token comment">// x 输出结果:</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 27.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="number-对象方法" tabindex="-1"><a class="header-anchor" href="#number-对象方法" aria-hidden="true">#</a> Number 对象方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>isFinite</td><td>检测指定参数是否为无穷大。</td></tr><tr><td>isInteger</td><td>检测指定参数是否为整数。</td></tr><tr><td>isNaN</td><td>检测指定参数是否为 NaN。</td></tr><tr><td>isSafeInteger</td><td>检测指定参数是否为安全整数。</td></tr><tr><td>toExponential(x)</td><td>把对象的值转换为指数计数法。</td></tr><tr><td>toFixed(x)</td><td>把数字转换为字符串，结果的小数点后有指定位数的数字。</td></tr><tr><td>toLocaleString(locales, options)</td><td>返回数字在特定语言环境下的表示字符串。</td></tr><tr><td>toPrecision(x)</td><td>把数字格式化为指定的长度。</td></tr><tr><td>toString()</td><td>把数字转换为字符串，使用指定的基数。</td></tr><tr><td>valueOf()</td><td>返回一个 Number 对象的基本数字值。</td></tr></tbody></table><h3 id="isfinite" tabindex="-1"><a class="header-anchor" href="#isfinite" aria-hidden="true">#</a> isFinite()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// sFinite() 函数用于检测指定参数是否为无穷大。</span>
<span class="token comment">// 提示：如果 number是 NaN（非数字），或者是正、负无穷大的数，则返回 false。</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isinteger" tabindex="-1"><a class="header-anchor" href="#isinteger" aria-hidden="true">#</a> isInteger()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用于检测指定参数是否为无整数，如果是整数返回 true，否则返回 false。</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="issafeinteger" tabindex="-1"><a class="header-anchor" href="#issafeinteger" aria-hidden="true">#</a> isSafeInteger()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断传入的参数值是否是一个&quot;安全整数&quot;（safe integer），如果是安全整数返回 true，否则返回 false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toexponential" tabindex="-1"><a class="header-anchor" href="#toexponential" aria-hidden="true">#</a> toExponential()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 把对象的值转换为指数计数法:</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5.56789</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5.56789e+0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tofixed" tabindex="-1"><a class="header-anchor" href="#tofixed" aria-hidden="true">#</a> toFixed()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可把 Number 四舍五入为指定小数位数的数字。</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5.56789</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5.57</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tolocalestring" tabindex="-1"><a class="header-anchor" href="#tolocalestring" aria-hidden="true">#</a> toLocaleString()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用本地设置格式化字符串：</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1000000</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1,000,000</span>
    <span class="token comment">// 使用特定的语言环境将数字格式化为字符串</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&quot;fi-FI&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1 000 000</span>
    <span class="token comment">// 使用特定的语言环境将数字格式化为货币字符串</span>
    <span class="token comment">//人民币</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&quot;zh-CN&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token string">&quot;currency&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&quot;CNY&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ¥1,000,000.00</span>
    <span class="token comment">// 美元</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token string">&quot;currency&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&quot;USD&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// $1,000,000.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toprecision" tabindex="-1"><a class="header-anchor" href="#toprecision" aria-hidden="true">#</a> toPrecision()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以指定的精度返回该数值对象的字符串表示，四舍五入到 precision 参数指定的显示数字位数</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">13.3714</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> n <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n<span class="token punctuation">)</span> <span class="token comment">// string</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 13.4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 把数字转换为字符串：</span>
    <span class="token comment">// 当 radix 为 2 时，NumberObject 会被转换为二进制值表示的字符串。</span>
    <span class="token comment">// number.toString(radix)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 13.3714</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1101.0101111100010100000100100000010110111100000000011</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="valueof" tabindex="-1"><a class="header-anchor" href="#valueof" aria-hidden="true">#</a> valueOf()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 返回一个 Number 对象的基本数字值：</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 13.3714</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6-新增-number-属性" tabindex="-1"><a class="header-anchor" href="#es6-新增-number-属性" aria-hidden="true">#</a> ES6 新增 Number 属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>EPSILON</td><td>表示 1 和比最接近 1 且大于 1 的最小 Number 之间的差别</td></tr><tr><td>MIN_SAFE_INTEGER</td><td>表示在 JavaScript中最小的安全的 integer 型数字 (-(253 - 1))</td></tr><tr><td>MAX_SAFE_INTEGER</td><td>表示在 JavaScript 中最大的安全整数（253 - 1）</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">var</span> x <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span>
  <span class="token keyword">var</span> y <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span>
  <span class="token keyword">var</span> z <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span>

  <span class="token comment">// 输出结果:</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 2.220446049250313e-16</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment">// -9007199254740991</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token comment">// 9007199254740991</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6-新增-number-方法" tabindex="-1"><a class="header-anchor" href="#es6-新增-number-方法" aria-hidden="true">#</a> ES6 新增 Number 方法</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>isInteger</td><td>用来判断给定的参数是否为整数</td></tr><tr><td>isSafeInteger</td><td>判断传入的参数值是否是一个&quot;安全整数&quot;</td></tr></tbody></table><h3 id="isinteger-1" tabindex="-1"><a class="header-anchor" href="#isinteger-1" aria-hidden="true">#</a> isInteger()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Number.isInteger() 在参数是整数时返回 true。</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">10.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="issafeinteger-1" tabindex="-1"><a class="header-anchor" href="#issafeinteger-1" aria-hidden="true">#</a> isSafeInteger()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 返回一个 Number 对象的基本数字值：</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ture</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span><span class="token number">12345678901234567890</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","12.Numberduixiang.html.vue"]]);export{r as default};
